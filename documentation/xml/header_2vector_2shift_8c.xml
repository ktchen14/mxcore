<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="header_2vector_2shift_8c" kind="file" language="C++">
    <compoundname>shift.c</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="access_8h" local="yes">access.h</includes>
    <includes refid="remove_8h" local="yes">remove.h</includes>
    <includedby refid="shift_8h" local="yes">header/vector/shift.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdalign.h</label>
      </node>
      <node id="14">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>errno.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>remove.c</label>
        <link refid="header_2vector_2remove_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>remove.h</label>
        <link refid="remove_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/shift.c</label>
        <link refid="header_2vector_2shift_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>resize.c</label>
        <link refid="header_2vector_2resize_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>resize.h</label>
        <link refid="resize_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="1">
        <label>header/vector/shift.c</label>
        <link refid="header_2vector_2shift_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>header/vector/shift.h</label>
        <link refid="shift_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="header_2vector_2shift_8c_1ac122fb6db251ad22725b24081bc75245" prot="public" static="no">
        <name>VECTOR_SHIFT_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/shift.c" line="4" column="9" bodyfile="header/vector/shift.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="header_2vector_2shift_8c_1a2328c81eefb3798ffc7c591f22ffe590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_pull_z</definition>
        <argsstring>(vector_t vector, void *elmt, size_t z)</argsstring>
        <name>vector_pull_z</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Copy the last element in the <emphasis>vector</emphasis> to <emphasis>elmt</emphasis> and remove it. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the element won&apos;t be copied before it&apos;s removed.</para>
<para>Once the element is removed, if the <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> of the <emphasis>vector</emphasis> is reduced such that <computeroutput>length &lt;= (volume - 1) / 2</computeroutput>, a <ref refid="resize_8h_1a41c3b52c91171f84f426708a124b9106" kindref="member">vector_resize_z()</ref> will be attempted to reduce the <ref refid="common_8h_1aa15669c7ce377e2da885ecace1d69242" kindref="member">volume</ref> to: <formula id="1">\[ volume = \frac{length \times 6 + 4}{5} \]</formula> On success the shrunk vector will be returned. Otherwise the vector will be returned as is (without the element).</para>
<para>If no last element is in the <emphasis>vector</emphasis> (the <emphasis>vector&apos;s</emphasis> <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> is zero) then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to copy the element to or <computeroutput>NULL</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/shift.c" line="16" column="17" bodyfile="header/vector/shift.c" bodystart="16" bodyend="20"/>
        <references refid="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" compoundref="header_2vector_2access_8c" startline="21" endline="27">vector_get</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <references refid="remove_8h_1a2738a6125160c41fe8d9d81606cb3fac" compoundref="header_2vector_2remove_8c" startline="18" endline="20">vector_remove_z</references>
        <referencedby refid="shift_8h_1a53e32ba91d44371a672ba262533ba134" compoundref="shift_8h" startline="39" endline="39">vector_pull</referencedby>
      </memberdef>
      <memberdef kind="function" id="header_2vector_2shift_8c_1ac03c1ef96fee473e9f9b858cc64293dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_shift_z</definition>
        <argsstring>(vector_t vector, void *elmt, size_t z)</argsstring>
        <name>vector_shift_z</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Copy the first element in the <emphasis>vector</emphasis> to <emphasis>elmt</emphasis> and remove it. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements after the first are shifted one element toward the head of the <emphasis>vector</emphasis>.</para>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the element won&apos;t be copied before it&apos;s removed.</para>
<para>Once the element is removed and subsequent elements are shifted, if the <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> of the <emphasis>vector</emphasis> is reduced such that <computeroutput>length &lt;= (volume - 1) / 2</computeroutput>, a <ref refid="resize_8h_1a41c3b52c91171f84f426708a124b9106" kindref="member">vector_resize_z()</ref> will be attempted to reduce the <ref refid="common_8h_1aa15669c7ce377e2da885ecace1d69242" kindref="member">volume</ref> to: <formula id="1">\[ volume = \frac{length \times 6 + 4}{5} \]</formula> On success the shrunk vector will be returned. Otherwise the vector will be returned as is (without the element).</para>
<para>If no first element is in the <emphasis>vector</emphasis> (the <emphasis>vector&apos;s</emphasis> <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> is zero) then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to copy the element to or <computeroutput>NULL</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/shift.c" line="22" column="17" bodyfile="header/vector/shift.c" bodystart="22" bodyend="26"/>
        <references refid="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" compoundref="header_2vector_2access_8c" startline="21" endline="27">vector_get</references>
        <references refid="remove_8h_1a2738a6125160c41fe8d9d81606cb3fac" compoundref="header_2vector_2remove_8c" startline="18" endline="20">vector_remove_z</references>
        <referencedby refid="shift_8h_1a40d547275106f5953325c143e637feec" compoundref="shift_8h" startline="87" endline="87">vector_shift</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/shift.c</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_SHIFT_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_SHIFT_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="access_8h" kindref="compound">access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="remove_8h" kindref="compound">remove.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="header_2vector_2shift_8c_1a2328c81eefb3798ffc7c591f22ffe590" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="header_2vector_2shift_8c_1a2328c81eefb3798ffc7c591f22ffe590" kindref="member">vector_pull_z</ref>(<ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elmt<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" kindref="member">vector_get</ref>(vector,<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector)<sp/>-<sp/>1,<sp/>elmt,<sp/>z);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="remove_8h_1a2738a6125160c41fe8d9d81606cb3fac" kindref="member">vector_remove_z</ref>(vector,<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector)<sp/>-<sp/>1,<sp/>z);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="header_2vector_2shift_8c_1ac03c1ef96fee473e9f9b858cc64293dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="header_2vector_2shift_8c_1ac03c1ef96fee473e9f9b858cc64293dc" kindref="member">vector_shift_z</ref>(<ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elmt<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" kindref="member">vector_get</ref>(vector,<sp/>0,<sp/>elmt,<sp/>z);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="remove_8h_1a2738a6125160c41fe8d9d81606cb3fac" kindref="member">vector_remove_z</ref>(vector,<sp/>0,<sp/>z);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_SHIFT_C<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/shift.c"/>
  </compounddef>
</doxygen>
