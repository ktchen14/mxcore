<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="create_8h" kind="file" language="C++">
    <compoundname>create.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="header_2vector_2create_8c" local="yes">create.c</includes>
    <includedby refid="vector_8h" local="yes">header/vector.h</includedby>
    <includedby refid="header_2vector_2create_8c" local="yes">header/vector/create.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdalign.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>errno.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>create.c</label>
        <link refid="header_2vector_2create_8c"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/create.h</label>
        <link refid="create_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="3">
        <label>header/vector/create.c</label>
        <link refid="header_2vector_2create_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/create.h</label>
        <link refid="create_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="create_8h_1a215761b56747dfca86cf08ac9178ff15" prot="public" static="no">
        <name>vector_define</name>
        <param><defname>type</defname></param>
        <param><defname>...</defname></param>
        <initializer>  ({ \
  /* Fail unless type is an actual type before we declare __data with */ \
  /* __typeof__(type). Otherwise the compiler is silent on this kind of */ \
  /* mistake: */ \
  /*   vector_define(1, 2, 3, 4)       =&gt; (int[])    { 2, 3, 4 } */ \
  /* When this was intended: */ \
  /*   vector_define(int, 1, 2, 3, 4)  =&gt; (int[]) { 1, 2, 3, 4 } */ \
  (void) __builtin_types_compatible_p(type, void); \
  /* We must take the __typeof__(type) here so that a strange type like */ \
  /* int[2] or void (*)(void) is syntactically acceptable. */ \
  __typeof__(type) __data[] = { __VA_ARGS__ }; \
  <ref refid="create_8h_1a908da2b8ed3ee5d4fd920996312a8da8" kindref="member">vector_import</ref>(__data, sizeof(__data) / sizeof(__data[0])); \
})</initializer>
        <briefdescription>
<para>Allocate and initialize a vector from the argument list. </para>
        </briefdescription>
        <detaileddescription>
<para>This is <ref refid="create_8h_1a908da2b8ed3ee5d4fd920996312a8da8" kindref="member">vector_import()</ref> with <emphasis>data</emphasis> constructed and <emphasis>length</emphasis> calculated from the argument list. The element type of the created vector will be <emphasis>type</emphasis>. If an argument in ... is incompatible with <emphasis>type</emphasis> then the behavior is undefined.</para>
<para>For example:<programlisting filename=".c"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*vector<sp/>=<sp/><ref refid="create_8h_1a215761b56747dfca86cf08ac9178ff15" kindref="member">vector_define</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8,<sp/>13,<sp/>21,<sp/>34);</highlight></codeline>
</programlisting></para>
<para>On failure this will retain the value of <computeroutput>errno</computeroutput> set by malloc().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>a complete object type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of elements to initialize the vector from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/create.h" line="72" column="9" bodyfile="header/vector/create.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="create_8h_1ac29016ecf0082276463502be10ac632f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_create</definition>
        <argsstring>(void)</argsstring>
        <name>vector_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate and initialize a zero length vector. </para>
        </briefdescription>
        <detaileddescription>
<para>On failure this will retain the value of <computeroutput>errno</computeroutput> set by malloc().</para>
<para><simplesect kind="return"><para>the new vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/create.h" line="20" column="17" bodyfile="header/vector/create.c" bodystart="18" bodyend="27" declfile="header/vector/create.h" declline="20" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="create_8h_1a908da2b8ed3ee5d4fd920996312a8da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_import</definition>
        <argsstring>(const void *data, size_t length)</argsstring>
        <name>vector_import</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize a vector from <emphasis>length</emphasis> elements of <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will create and return a vector containing <emphasis>length</emphasis> elements from <emphasis>data</emphasis>. On failure this will retain the value of <computeroutput>errno</computeroutput> set by malloc().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to initialize the vector from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to copy from <emphasis>data</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="create_8h_1a73938d98c5b8ca0944b5f3fd056b8679" kindref="member">vector_import_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/create.h" line="35" column="10" bodyfile="header/vector/create.h" bodystart="35" bodyend="35"/>
        <references refid="create_8h_1a73938d98c5b8ca0944b5f3fd056b8679" compoundref="header_2vector_2create_8c" startline="29" endline="42">vector_import_z</references>
      </memberdef>
      <memberdef kind="function" id="create_8h_1a73938d98c5b8ca0944b5f3fd056b8679" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_import_z</definition>
        <argsstring>(const void *data, size_t length, size_t z)</argsstring>
        <name>vector_import_z</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize a vector from <emphasis>length</emphasis> elements of <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will create and return a vector containing <emphasis>length</emphasis> elements from <emphasis>data</emphasis>. On failure this will retain the value of <computeroutput>errno</computeroutput> set by malloc().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to initialize the vector from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to copy from <emphasis>data</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of <emphasis>data</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="create_8h_1a908da2b8ed3ee5d4fd920996312a8da8" kindref="member">vector_import()</ref> - the implicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/create.h" line="51" column="17" bodyfile="header/vector/create.c" bodystart="29" bodyend="42" declfile="header/vector/create.h" declline="51" declcolumn="17"/>
        <referencedby refid="create_8h_1a908da2b8ed3ee5d4fd920996312a8da8" compoundref="create_8h" startline="35" endline="35">vector_import</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/create.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_CREATE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_CREATE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocate<sp/>and<sp/>initialize<sp/>a<sp/>zero<sp/>length<sp/>vector</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>On<sp/>failure<sp/>this<sp/>will<sp/>retain<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>malloc().</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>new<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="create_8h_1ac29016ecf0082276463502be10ac632f" kindref="member">vector_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>__attribute__((__malloc__));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocate<sp/>and<sp/>initialize<sp/>a<sp/>vector<sp/>from<sp/>@a<sp/>length<sp/>elements<sp/>of<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>create<sp/>and<sp/>return<sp/>a<sp/>vector<sp/>containing<sp/>@a<sp/>length<sp/>elements<sp/>from</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>@a<sp/>data.<sp/>On<sp/>failure<sp/>this<sp/>will<sp/>retain<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>malloc().</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>the<sp/>data<sp/>to<sp/>initialize<sp/>the<sp/>vector<sp/>from</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>@param<sp/>length<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>copy<sp/>from<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>new<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_import_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>vector_t<sp/>vector_import(const<sp/>void<sp/>*data,<sp/>size_t<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="create_8h_1a908da2b8ed3ee5d4fd920996312a8da8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_import(data,<sp/>length)<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/>vector_import_z((data),<sp/>(length),<sp/>VECTOR_Z((data)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocate<sp/>and<sp/>initialize<sp/>a<sp/>vector<sp/>from<sp/>@a<sp/>length<sp/>elements<sp/>of<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>create<sp/>and<sp/>return<sp/>a<sp/>vector<sp/>containing<sp/>@a<sp/>length<sp/>elements<sp/>from</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>@a<sp/>data.<sp/>On<sp/>failure<sp/>this<sp/>will<sp/>retain<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>malloc().</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>the<sp/>data<sp/>to<sp/>initialize<sp/>the<sp/>vector<sp/>from</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@param<sp/>length<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>copy<sp/>from<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>new<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_import()<sp/>-<sp/>the<sp/>implicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="create_8h_1a73938d98c5b8ca0944b5f3fd056b8679" kindref="member">vector_import_z</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>__attribute__((__malloc__,<sp/>nonnull));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocate<sp/>and<sp/>initialize<sp/>a<sp/>vector<sp/>from<sp/>the<sp/>argument<sp/>list</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>vector_import()<sp/>with<sp/>@a<sp/>data<sp/>constructed<sp/>and<sp/>@a<sp/>length<sp/>calculated</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>from<sp/>the<sp/>argument<sp/>list.<sp/>The<sp/>element<sp/>type<sp/>of<sp/>the<sp/>created<sp/>vector<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>@a<sp/>type.<sp/>If<sp/>an<sp/>argument<sp/>in<sp/>...<sp/>is<sp/>incompatible<sp/>with<sp/>@a<sp/>type<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>For<sp/>example:<sp/>@code{.c}</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/>int<sp/>*vector<sp/>=<sp/>vector_define(int,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8,<sp/>13,<sp/>21,<sp/>34);</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>On<sp/>failure<sp/>this<sp/>will<sp/>retain<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>malloc().</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>@param<sp/>type<sp/>a<sp/>complete<sp/>object<sp/>type</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@param<sp/>...<sp/>a<sp/>sequence<sp/>of<sp/>elements<sp/>to<sp/>initialize<sp/>the<sp/>vector<sp/>from</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>new<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="create_8h_1a215761b56747dfca86cf08ac9178ff15" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_define(type,<sp/>...)<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fail<sp/>unless<sp/>type<sp/>is<sp/>an<sp/>actual<sp/>type<sp/>before<sp/>we<sp/>declare<sp/>__data<sp/>with<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>__typeof__(type).<sp/>Otherwise<sp/>the<sp/>compiler<sp/>is<sp/>silent<sp/>on<sp/>this<sp/>kind<sp/>of<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mistake:<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>vector_define(1,<sp/>2,<sp/>3,<sp/>4)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>(int[])<sp/><sp/><sp/><sp/>{<sp/>2,<sp/>3,<sp/>4<sp/>}<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>this<sp/>was<sp/>intended:<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>vector_define(int,<sp/>1,<sp/>2,<sp/>3,<sp/>4)<sp/><sp/>=&gt;<sp/>(int[])<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4<sp/>}<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/>(void)<sp/>__builtin_types_compatible_p(type,<sp/>void);<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>must<sp/>take<sp/>the<sp/>__typeof__(type)<sp/>here<sp/>so<sp/>that<sp/>a<sp/>strange<sp/>type<sp/>like<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>int[2]<sp/>or<sp/>void<sp/>(*)(void)<sp/>is<sp/>syntactically<sp/>acceptable.<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/>__typeof__(type)<sp/>__data[]<sp/>=<sp/>{<sp/>__VA_ARGS__<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/>vector_import(__data,<sp/>sizeof(__data)<sp/>/<sp/>sizeof(__data[0]));<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor">})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_CREATE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="source_2vector_2create_8c" kindref="compound">create.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/create.h"/>
  </compounddef>
</doxygen>
