<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="header_2vector_2insert_8c" kind="file" language="C++">
    <compoundname>insert.c</compoundname>
    <includes local="no">errno.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="insert_8h" local="yes">insert.h</includes>
    <includes refid="access_8h" local="yes">access.h</includes>
    <includes refid="resize_8h" local="yes">resize.h</includes>
    <includedby refid="insert_8h" local="yes">header/vector/insert.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>access.h</label>
        <link refid="access_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdalign.h</label>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>errno.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>header/vector/insert.c</label>
        <link refid="header_2vector_2insert_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>insert.h</label>
        <link refid="insert_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>resize.c</label>
        <link refid="header_2vector_2resize_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>resize.h</label>
        <link refid="resize_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="1">
        <label>header/vector/insert.c</label>
        <link refid="header_2vector_2insert_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>header/vector/insert.h</label>
        <link refid="insert_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="header_2vector_2insert_8c_1aa524c2b721d860d661efd02a119e648a" prot="public" static="no">
        <name>VECTOR_INSERT_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.c" line="4" column="9" bodyfile="header/vector/insert.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="header_2vector_2insert_8c_1a99838caa28553e7237ba9e0693b0e790" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_insert_z</definition>
        <argsstring>(restrict vector_t vector, size_t i, const void *restrict elmt, size_t z)</argsstring>
        <name>vector_insert_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Insert the data at <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The index of the inserted element will be <emphasis>i</emphasis>. If <emphasis>i</emphasis> is the length of the <emphasis>vector</emphasis> then this will append the element to the <emphasis>vector</emphasis>. If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted element will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its length then the behavior is undefined. If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the <emphasis>vector</emphasis> to insert the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the element to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1aa374654eeb6260651eeefaf41672088d" kindref="member">vector_insert()</ref> - the implicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.c" line="19" column="17" bodyfile="header/vector/insert.c" bodystart="19" bodyend="25"/>
        <references refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</references>
        <referencedby refid="insert_8h_1aa374654eeb6260651eeefaf41672088d" compoundref="insert_8h" startline="39" endline="39">vector_insert</referencedby>
      </memberdef>
      <memberdef kind="function" id="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_inject_z</definition>
        <argsstring>(restrict vector_t vector, size_t i, const void *restrict elmt, size_t n, size_t z)</argsstring>
        <name>vector_inject_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Insert <emphasis>n</emphasis> elements from <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> starting at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The index of the first inserted element will be <emphasis>i</emphasis>. If <emphasis>i</emphasis> is the length of the <emphasis>vector</emphasis> then this will append the elements to the <emphasis>vector</emphasis>. If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted elements will be uninitialized. This is more efficient than calling <ref refid="insert_8h_1a99838caa28553e7237ba9e0693b0e790" kindref="member">vector_insert_z()</ref> <emphasis>n</emphasis> times as the elements after <computeroutput>i + n</computeroutput> will be shifted only once.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its length then the behavior is undefined. If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the <emphasis>vector</emphasis> to insert the elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the elements to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to insert from <emphasis>elmt</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1a29b1b69bb9f2d9a114be35ea69af770a" kindref="member">vector_inject()</ref> - the implicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.c" line="27" column="17" bodyfile="header/vector/insert.c" bodystart="27" bodyend="54"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <references refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" compoundref="header_2vector_2resize_8c" startline="43" endline="60">vector_ensure_z</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="header_2vector_2insert_8c_1a52006f26b6f5a04e2961b3dc667b90a3" compoundref="header_2vector_2insert_8c" startline="56" endline="61">vector_append_z</referencedby>
        <referencedby refid="header_2vector_2insert_8c_1af3a00f1cf9b7d97899239f6d22e8bf51" compoundref="header_2vector_2insert_8c" startline="63" endline="69">vector_extend_z</referencedby>
        <referencedby refid="insert_8h_1a29b1b69bb9f2d9a114be35ea69af770a" compoundref="insert_8h" startline="103" endline="103">vector_inject</referencedby>
        <referencedby refid="header_2vector_2insert_8c_1a99838caa28553e7237ba9e0693b0e790" compoundref="header_2vector_2insert_8c" startline="19" endline="25">vector_insert_z</referencedby>
      </memberdef>
      <memberdef kind="function" id="header_2vector_2insert_8c_1a52006f26b6f5a04e2961b3dc667b90a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_append_z</definition>
        <argsstring>(restrict vector_t vector, const void *restrict elmt, size_t z)</argsstring>
        <name>vector_append_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Insert the data at <emphasis>elmt</emphasis> as the last element in the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted element will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the element to append </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1a52006f26b6f5a04e2961b3dc667b90a3" kindref="member">vector_append_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.c" line="56" column="17" bodyfile="header/vector/insert.c" bodystart="56" bodyend="61"/>
        <references refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="insert_8h_1a10329d51d7a29d4ebbffefd425986b44" compoundref="insert_8h" startline="164" endline="164">vector_append</referencedby>
      </memberdef>
      <memberdef kind="function" id="header_2vector_2insert_8c_1af3a00f1cf9b7d97899239f6d22e8bf51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_extend_z</definition>
        <argsstring>(restrict vector_t vector, const void *restrict elmt, size_t n, size_t z)</argsstring>
        <name>vector_extend_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>n</emphasis> elements from <emphasis>elmt</emphasis> to the tail of the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted elements will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the elements to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to insert from <emphasis>elmt</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1af3a00f1cf9b7d97899239f6d22e8bf51" kindref="member">vector_extend_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.c" line="63" column="17" bodyfile="header/vector/insert.c" bodystart="63" bodyend="69"/>
        <references refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="insert_8h_1a4fe00acd3790816c0218eef743861e8d" compoundref="insert_8h" startline="216" endline="216">vector_extend</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/insert.c</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_INSERT_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_INSERT_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="insert_8h" kindref="compound">insert.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="access_8h" kindref="compound">access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resize_8h" kindref="compound">resize.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="header_2vector_2insert_8c_1a99838caa28553e7237ba9e0693b0e790" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="header_2vector_2insert_8c_1a99838caa28553e7237ba9e0693b0e790" kindref="member">vector_insert_z</ref>(</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" kindref="member">vector_inject_z</ref>(vector,<sp/>i,<sp/>elmt,<sp/>1,<sp/>z);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" kindref="member">vector_inject_z</ref>(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_add_overflow(length,<sp/>n,<sp/>&amp;length))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errno<sp/>=<sp/>ENOMEM,<sp/>NULL;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vector<sp/>=<sp/><ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z</ref>(vector,<sp/>length,<sp/>z))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>existing<sp/>elements<sp/>n<sp/>elements<sp/>toward<sp/>the<sp/>tail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*target<sp/>=<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/>i<sp/>+<sp/>n,<sp/>z);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*source<sp/>=<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/>i<sp/>+<sp/>0,<sp/>z);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(<ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector)<sp/>-<sp/>i)<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>memmove(target,<sp/>source,<sp/>size);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elmt<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/>i,<sp/>z),<sp/>elmt,<sp/>n<sp/>*<sp/>z);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>increase<sp/>the<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>__vector_to_header(vector)-&gt;length<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="header_2vector_2insert_8c_1a52006f26b6f5a04e2961b3dc667b90a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="header_2vector_2insert_8c_1a52006f26b6f5a04e2961b3dc667b90a3" kindref="member">vector_append_z</ref>(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" kindref="member">vector_inject_z</ref>(vector,<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector),<sp/>elmt,<sp/>1,<sp/>z);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="header_2vector_2insert_8c_1af3a00f1cf9b7d97899239f6d22e8bf51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="header_2vector_2insert_8c_1af3a00f1cf9b7d97899239f6d22e8bf51" kindref="member">vector_extend_z</ref>(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" kindref="member">vector_inject_z</ref>(vector,<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector),<sp/>elmt,<sp/>n,<sp/>z);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_INSERT_C<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/insert.c"/>
  </compounddef>
</doxygen>
