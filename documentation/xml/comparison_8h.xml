<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="comparison_8h" kind="file" language="C++">
    <compoundname>comparison.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="header_2vector_2comparison_8c" local="yes">comparison.c</includes>
    <includedby refid="vector_8h" local="yes">header/vector.h</includedby>
    <includedby refid="header_2vector_2comparison_8c" local="yes">header/vector/comparison.c</includedby>
    <incdepgraph>
      <node id="8">
        <label>access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdalign.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>comparison.c</label>
        <link refid="header_2vector_2comparison_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/comparison.h</label>
        <link refid="comparison_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="3">
        <label>header/vector/comparison.c</label>
        <link refid="header_2vector_2comparison_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/comparison.h</label>
        <link refid="comparison_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>Comparison</header>
      <memberdef kind="function" id="group__vector__module_1ga62199ee08af9e8d95c43db26508da544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Bool</type>
        <definition>_Bool vector_eq</definition>
        <argsstring>(vector_c va, vector_c vb, _Bool(*eq)(const void *a, const void *b))</argsstring>
        <name>vector_eq</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>_Bool(*)(const void *a, const void *b)</type>
          <declname>eq</declname>
        </param>
        <briefdescription>
<para>Return whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Here &quot;equivalent&quot; means that both of <emphasis>va</emphasis> and <emphasis>vb</emphasis> are <computeroutput>NULL</computeroutput>, or neither <emphasis>va</emphasis> or <emphasis>vb</emphasis> is <computeroutput>NULL</computeroutput> and:</para>
<para><itemizedlist>
<listitem><para><emphasis>va</emphasis> and <emphasis>vb</emphasis> have the same length, and</para>
</listitem><listitem><para><emphasis>eq</emphasis> returns <computeroutput>true</computeroutput> when called on each element in <emphasis>va</emphasis> and the element at the same index in <emphasis>vb</emphasis> </para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>va</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vb</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eq</parametername>
</parameternamelist>
<parameterdescription>
<para>the equality function that will be used to decide whether an element in <emphasis>va</emphasis> is equivalent to an element in <emphasis>vb</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="36" column="7" bodyfile="header/vector/comparison.h" bodystart="36" bodyend="36"/>
        <references refid="group__vector__module_1gaf3fe34e28652403f7753d191f93c1fc4" compoundref="header_2vector_2comparison_8c" startline="22" endline="29">vector_eq_z</references>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gaf3fe34e28652403f7753d191f93c1fc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>_Bool</type>
        <definition>_Bool vector_eq_z</definition>
        <argsstring>(vector_c va, vector_c vb, _Bool(*eq)(const void *a, const void *b), size_t za, size_t zb)</argsstring>
        <name>vector_eq_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>_Bool(*)(const void *a, const void *b)</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>za</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
<para>Return whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Here &quot;equivalent&quot; means that both of <emphasis>va</emphasis> and <emphasis>vb</emphasis> are <computeroutput>NULL</computeroutput>, or neither <emphasis>va</emphasis> or <emphasis>vb</emphasis> is <computeroutput>NULL</computeroutput> and:</para>
<para><itemizedlist>
<listitem><para><emphasis>va</emphasis> and <emphasis>vb</emphasis> have the same length, and</para>
</listitem><listitem><para><emphasis>eq</emphasis> returns <computeroutput>true</computeroutput> when called on each element in <emphasis>va</emphasis> and the element at the same index in <emphasis>vb</emphasis> </para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>va</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vb</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eq</parametername>
</parameternamelist>
<parameterdescription>
<para>the equality function that will be used to decide whether an element in <emphasis>va</emphasis> is equivalent to an element in <emphasis>vb</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>za</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of <emphasis>va</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zb</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of <emphasis>vb</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="57" column="14" bodyfile="header/vector/comparison.c" bodystart="22" bodyend="29" declfile="header/vector/comparison.h" declline="57" declcolumn="14"/>
        <references refid="group__vector__module_1ga93613d2838fd60a1f478f145a7d766db" compoundref="header_2vector_2comparison_8c" startline="31" endline="52">vector_eq_with_z</references>
        <referencedby refid="group__vector__module_1ga62199ee08af9e8d95c43db26508da544" compoundref="comparison_8h" startline="36" endline="36">vector_eq</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga0b9271c52ecfc92c465a059ce3cc4178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Bool</type>
        <definition>_Bool vector_eq_with</definition>
        <argsstring>(vector_c va, vector_c vb, _Bool(*eq)(const void *a, const void *b, void *data), void *data)</argsstring>
        <name>vector_eq_with</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>_Bool(*)(const void *a, const void *b, void *data)</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Return whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis> with contextual information. </para>
        </briefdescription>
        <detaileddescription>
<para>Here &quot;equivalent&quot; means that both of <emphasis>va</emphasis> and <emphasis>vb</emphasis> are <computeroutput>NULL</computeroutput>, or neither <emphasis>va</emphasis> or <emphasis>vb</emphasis> is <computeroutput>NULL</computeroutput> and:</para>
<para><itemizedlist>
<listitem><para><emphasis>va</emphasis> and <emphasis>vb</emphasis> have the same length, and</para>
</listitem><listitem><para><emphasis>eq</emphasis> returns <computeroutput>true</computeroutput> when called on each element in <emphasis>va</emphasis> and the element at the same index in <emphasis>vb</emphasis> </para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>va</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vb</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eq</parametername>
</parameternamelist>
<parameterdescription>
<para>the equality function that will be used to decide whether an element in <emphasis>va</emphasis> is equivalent to an element in <emphasis>vb</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>contextual information to pass as the last argument to <emphasis>eq</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="88" column="7" bodyfile="header/vector/comparison.h" bodystart="88" bodyend="88"/>
        <references refid="group__vector__module_1ga93613d2838fd60a1f478f145a7d766db" compoundref="header_2vector_2comparison_8c" startline="31" endline="52">vector_eq_with_z</references>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga93613d2838fd60a1f478f145a7d766db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>_Bool</type>
        <definition>_Bool vector_eq_with_z</definition>
        <argsstring>(vector_c va, vector_c vb, _Bool(*eq)(const void *a, const void *b, void *data), void *data, size_t za, size_t zb)</argsstring>
        <name>vector_eq_with_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>_Bool(*)(const void *a, const void *b, void *data)</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>za</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
<para>Return whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis> with contextual information. </para>
        </briefdescription>
        <detaileddescription>
<para>Here &quot;equivalent&quot; means that both of <emphasis>va</emphasis> and <emphasis>vb</emphasis> are <computeroutput>NULL</computeroutput>, or neither <emphasis>va</emphasis> or <emphasis>vb</emphasis> is <computeroutput>NULL</computeroutput> and:</para>
<para><itemizedlist>
<listitem><para><emphasis>va</emphasis> and <emphasis>vb</emphasis> have the same length, and</para>
</listitem><listitem><para><emphasis>eq</emphasis> returns <computeroutput>true</computeroutput> when called on each element in <emphasis>va</emphasis> and the element at the same index in <emphasis>vb</emphasis> </para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>va</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vb</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eq</parametername>
</parameternamelist>
<parameterdescription>
<para>the equality function that will be used to decide whether an element in <emphasis>va</emphasis> is equivalent to an element in <emphasis>vb</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>contextual information to pass as the last argument to <emphasis>eq</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>za</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of <emphasis>va</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zb</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of <emphasis>vb</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether vector <emphasis>va</emphasis> is equivalent to vector <emphasis>vb</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="111" column="14" bodyfile="header/vector/comparison.c" bodystart="31" bodyend="52" declfile="header/vector/comparison.h" declline="111" declcolumn="14"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="group__vector__module_1ga0b9271c52ecfc92c465a059ce3cc4178" compoundref="comparison_8h" startline="88" endline="88">vector_eq_with</referencedby>
        <referencedby refid="group__vector__module_1gaf3fe34e28652403f7753d191f93c1fc4" compoundref="header_2vector_2comparison_8c" startline="22" endline="29">vector_eq_z</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gaa94a318aa532b624fedc33bb2a55b1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vector_cmp</definition>
        <argsstring>(vector_c va, vector_c vb, int(*cmp)(const void *a, const void *b))</argsstring>
        <name>vector_cmp</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b)</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="123" column="5" bodyfile="header/vector/comparison.h" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gacca4dbb6b85cf7e230bfd7840c30d978" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int vector_cmp_z</definition>
        <argsstring>(vector_c va, vector_c vb, int(*cmp)(const void *a, const void *b), size_t za, size_t zb)</argsstring>
        <name>vector_cmp_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b)</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>za</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="126" column="12" declfile="header/vector/comparison.h" declline="126" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga77c08967631de17b4d74267ebba98e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vector_cmp_with</definition>
        <argsstring>(vector_c va, vector_c vb, int(*cmp)(const void *a, const void *b, void *data), void *data)</argsstring>
        <name>vector_cmp_with</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b, void *data)</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="138" column="5" bodyfile="header/vector/comparison.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga313ed5324d29aeeed519342b199a4537" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int vector_cmp_with_z</definition>
        <argsstring>(vector_c va, vector_c vb, int(*cmp)(const void *a, const void *b, void *data), void *data, size_t za, size_t zb)</argsstring>
        <name>vector_cmp_with_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>va</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vb</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b, void *data)</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>za</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/comparison.h" line="141" column="12" declfile="header/vector/comparison.h" declline="141" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/comparison.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_COMPARISON_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_COMPARISON_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/>@addtogroup<sp/>vector_module<sp/>Vector</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/>@{</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/>@name<sp/>Comparison</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/>@{</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Here<sp/>&quot;equivalent&quot;<sp/>means<sp/>that<sp/>both<sp/>of<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>are<sp/>@c<sp/>NULL,<sp/>or<sp/>neither</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>@a<sp/>va<sp/>or<sp/>@a<sp/>vb<sp/>is<sp/>@c<sp/>NULL<sp/>and:</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>have<sp/>the<sp/>same<sp/>length,<sp/>and</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>eq<sp/>returns<sp/>@c<sp/>true<sp/>when<sp/>called<sp/>on<sp/>each<sp/>element<sp/>in<sp/>@a<sp/>va<sp/>and<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/>at<sp/>the<sp/>same<sp/>index<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>@param<sp/>va<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>@param<sp/>vb<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>@param<sp/>eq<sp/>the<sp/>equality<sp/>function<sp/>that<sp/>will<sp/>be<sp/>used<sp/>to<sp/>decide<sp/>whether<sp/>an</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/>element<sp/>in<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>an<sp/>element<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>@return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>_Bool<sp/>vector_eq(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_c<sp/>va,<sp/>vector_c<sp/>vb,<sp/>_Bool<sp/>(*eq)(const<sp/>void<sp/>*a,<sp/>const<sp/>void<sp/>*b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="group__vector__module_1ga62199ee08af9e8d95c43db26508da544" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_eq(va,<sp/>vb,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/>vector_eq_z((va),<sp/>(vb),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((va)),<sp/>VECTOR_Z((vb)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>Here<sp/>&quot;equivalent&quot;<sp/>means<sp/>that<sp/>both<sp/>of<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>are<sp/>@c<sp/>NULL,<sp/>or<sp/>neither</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>@a<sp/>va<sp/>or<sp/>@a<sp/>vb<sp/>is<sp/>@c<sp/>NULL<sp/>and:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>have<sp/>the<sp/>same<sp/>length,<sp/>and</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>eq<sp/>returns<sp/>@c<sp/>true<sp/>when<sp/>called<sp/>on<sp/>each<sp/>element<sp/>in<sp/>@a<sp/>va<sp/>and<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/>at<sp/>the<sp/>same<sp/>index<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@param<sp/>va<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@param<sp/>vb<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@param<sp/>eq<sp/>the<sp/>equality<sp/>function<sp/>that<sp/>will<sp/>be<sp/>used<sp/>to<sp/>decide<sp/>whether<sp/>an</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/>element<sp/>in<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>an<sp/>element<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@param<sp/>za<sp/>the<sp/>element<sp/>size<sp/>of<sp/>@a<sp/>va</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>@param<sp/>zb<sp/>the<sp/>element<sp/>size<sp/>of<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>_Bool<sp/><ref refid="group__vector__module_1gaf3fe34e28652403f7753d191f93c1fc4" kindref="member">vector_eq_z</ref>(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>va,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vb,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>_Bool<sp/>(*eq)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>__attribute__((nonnull)),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>za,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>zb)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(3)));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb<sp/>with</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/>contextual<sp/>information</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>Here<sp/>&quot;equivalent&quot;<sp/>means<sp/>that<sp/>both<sp/>of<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>are<sp/>@c<sp/>NULL,<sp/>or<sp/>neither</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@a<sp/>va<sp/>or<sp/>@a<sp/>vb<sp/>is<sp/>@c<sp/>NULL<sp/>and:</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>have<sp/>the<sp/>same<sp/>length,<sp/>and</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>eq<sp/>returns<sp/>@c<sp/>true<sp/>when<sp/>called<sp/>on<sp/>each<sp/>element<sp/>in<sp/>@a<sp/>va<sp/>and<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/>at<sp/>the<sp/>same<sp/>index<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@param<sp/>va<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@param<sp/>vb<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@param<sp/>eq<sp/>the<sp/>equality<sp/>function<sp/>that<sp/>will<sp/>be<sp/>used<sp/>to<sp/>decide<sp/>whether<sp/>an</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/>element<sp/>in<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>an<sp/>element<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>contextual<sp/>information<sp/>to<sp/>pass<sp/>as<sp/>the<sp/>last<sp/>argument<sp/>to<sp/>@a<sp/>eq</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>_Bool<sp/>vector_eq_with(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_c<sp/>va,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_c<sp/>vb,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>_Bool<sp/>(*eq)(const<sp/>void<sp/>*a,<sp/>const<sp/>void<sp/>*b,<sp/>void<sp/>*data),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>void<sp/>*data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="group__vector__module_1ga0b9271c52ecfc92c465a059ce3cc4178" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_eq_with(va,<sp/>vb,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/>vector_eq_with_z((va),<sp/>(vb),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((va)),<sp/>VECTOR_Z((vb)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb<sp/>with</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/>contextual<sp/>information</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>Here<sp/>&quot;equivalent&quot;<sp/>means<sp/>that<sp/>both<sp/>of<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>are<sp/>@c<sp/>NULL,<sp/>or<sp/>neither</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@a<sp/>va<sp/>or<sp/>@a<sp/>vb<sp/>is<sp/>@c<sp/>NULL<sp/>and:</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>va<sp/>and<sp/>@a<sp/>vb<sp/>have<sp/>the<sp/>same<sp/>length,<sp/>and</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>-<sp/>@a<sp/>eq<sp/>returns<sp/>@c<sp/>true<sp/>when<sp/>called<sp/>on<sp/>each<sp/>element<sp/>in<sp/>@a<sp/>va<sp/>and<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/>at<sp/>the<sp/>same<sp/>index<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>@param<sp/>va<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@param<sp/>vb<sp/>a<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@param<sp/>eq<sp/>the<sp/>equality<sp/>function<sp/>that<sp/>will<sp/>be<sp/>used<sp/>to<sp/>decide<sp/>whether<sp/>an</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/>element<sp/>in<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>an<sp/>element<sp/>in<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>contextual<sp/>information<sp/>to<sp/>pass<sp/>as<sp/>the<sp/>last<sp/>argument<sp/>to<sp/>@a<sp/>eq</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param<sp/>za<sp/>the<sp/>element<sp/>size<sp/>of<sp/>@a<sp/>va</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@param<sp/>zb<sp/>the<sp/>element<sp/>size<sp/>of<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@return<sp/>whether<sp/>vector<sp/>@a<sp/>va<sp/>is<sp/>equivalent<sp/>to<sp/>vector<sp/>@a<sp/>vb</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>_Bool<sp/><ref refid="group__vector__module_1ga93613d2838fd60a1f478f145a7d766db" kindref="member">vector_eq_with_z</ref>(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>va,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vb,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>_Bool<sp/>(*eq)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((nonnull(1,<sp/>2))),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>za,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>zb)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(3)));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>int<sp/>vector_cmp(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_c<sp/>va,<sp/>vector_c<sp/>vb,<sp/>int<sp/>(*cmp)(const<sp/>void<sp/>*a,<sp/>const<sp/>void<sp/>*b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_cmp(va,<sp/>vb,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/>vector_cmp_z((va),<sp/>(vb),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((va)),<sp/>VECTOR_Z((vb)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vector_cmp_z(</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>va,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vb,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*cmp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>za,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>zb);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>int<sp/>vector_cmp_with(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_c<sp/>va,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_c<sp/>vb,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>int<sp/>(*cmp)(const<sp/>void<sp/>*a,<sp/>const<sp/>void<sp/>*b,<sp/>void<sp/>*data),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>void<sp/>*data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_cmp_with(va,<sp/>vb,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/>vector_cmp_with_z((va),<sp/>(vb),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((va)),<sp/>VECTOR_Z((vb)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vector_cmp_with_z(</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>va,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vb,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*cmp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>za,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>zb);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">///<sp/>@}</highlight></codeline>
<codeline lineno="150"><highlight class="comment">///<sp/>@}</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_COMPARISON_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="source_2vector_2comparison_8c" kindref="compound">comparison.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/comparison.h"/>
  </compounddef>
</doxygen>
