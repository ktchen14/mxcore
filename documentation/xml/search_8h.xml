<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="search_8h" kind="file" language="C++">
    <compoundname>search.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="header_2vector_2search_8c" local="yes">search.c</includes>
    <includedby refid="vector_8h" local="yes">header/vector.h</includedby>
    <includedby refid="header_2vector_2search_8c" local="yes">header/vector/search.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="11">
        <label>access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>access.h</label>
        <link refid="access_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdalign.h</label>
      </node>
      <node id="7">
        <label>search.c</label>
        <link refid="header_2vector_2search_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/search.h</label>
        <link refid="search_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="3">
        <label>header/vector/search.c</label>
        <link refid="header_2vector_2search_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/search.h</label>
        <link refid="search_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>Search</header>
      <memberdef kind="function" id="group__vector__module_1ga6179808aafb668e4287de4d030173ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_find</definition>
        <argsstring>(vector_c vector, bool(*eqf)(const void *elmt, const void *data), const void *data)</argsstring>
        <name>vector_find</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>bool(*)(const void *elmt, const void *data)</type>
          <declname>eqf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Find the first element in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return the index of the first element in the <emphasis>vector</emphasis> for which the expression <computeroutput>eqf(elmt, data)</computeroutput> is <computeroutput>true</computeroutput> where <emphasis>elmt</emphasis> is the location of an element in the <emphasis>vector</emphasis>.</para>
<para>If no such element is in the <emphasis>vector</emphasis> then this will return <computeroutput>SIZE_MAX</computeroutput>. Note that the largest possible index into an array of any type is <computeroutput>SIZE_MAX - 1</computeroutput> so <computeroutput>SIZE_MAX</computeroutput> is an unambiguous indication that no such element is in the <emphasis>vector</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eqf</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to determine equality </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to pass to <emphasis>eqf</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element on success; otherwise <computeroutput>SIZE_MAX</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="41" column="8" bodyfile="header/vector/search.h" bodystart="41" bodyend="41"/>
        <references refid="group__vector__module_1gaa886a904776e7c0cc6bdec4eefacd04a" compoundref="header_2vector_2search_8c" startline="19" endline="25">vector_find_z</references>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gaa886a904776e7c0cc6bdec4eefacd04a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_find_z</definition>
        <argsstring>(vector_c vector, bool(*eqf)(const void *elmt, const void *data), const void *data, size_t z)</argsstring>
        <name>vector_find_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>bool(*)(const void *elmt, const void *data)</type>
          <declname>eqf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Find the first element in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return the index of the first element in the <emphasis>vector</emphasis> for which the expression <computeroutput>eqf(elmt, data)</computeroutput> is <computeroutput>true</computeroutput> where <emphasis>elmt</emphasis> is the location of an element in the <emphasis>vector</emphasis>.</para>
<para>If no such element is in the <emphasis>vector</emphasis> then this will return <computeroutput>SIZE_MAX</computeroutput>. Note that the largest possible index into an array of any type is <computeroutput>SIZE_MAX - 1</computeroutput> so <computeroutput>SIZE_MAX</computeroutput> is an unambiguous indication that no such element is in the <emphasis>vector</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eqf</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to determine equality </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to pass to <emphasis>eqf</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element on success; otherwise <computeroutput>SIZE_MAX</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="61" column="15" bodyfile="header/vector/search.c" bodystart="19" bodyend="25" declfile="header/vector/search.h" declline="61" declcolumn="15"/>
        <references refid="group__vector__module_1gac688a8f438657eb30088adccc3a14bb6" compoundref="header_2vector_2search_8c" startline="27" endline="38">vector_find_next_z</references>
        <referencedby refid="group__vector__module_1ga6179808aafb668e4287de4d030173ba9" compoundref="search_8h" startline="41" endline="41">vector_find</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gaf1add13716135b33cf3e21f679f7ba17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_find_next</definition>
        <argsstring>(vector_c vector, size_t i, bool(*eqf)(const void *elmt, const void *data), const void *data)</argsstring>
        <name>vector_find_next</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool(*)(const void *elmt, const void *data)</type>
          <declname>eqf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Find the first element at or after index <emphasis>i</emphasis> in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return the index of the first element in the <emphasis>vector</emphasis> at or after index <emphasis>i</emphasis> for which the expression <computeroutput>eqf(elmt, data)</computeroutput> is <computeroutput>true</computeroutput> where <emphasis>elmt</emphasis> is the location of an element in the <emphasis>vector</emphasis>. Index <emphasis>i</emphasis> is <bold>inclusive</bold> so if the element at that index is equal to <emphasis>data</emphasis>, then <emphasis>i</emphasis> itself will be returned.</para>
<para>To iterate through all elements in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis> do: <programlisting filename=".c"><codeline><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1ga6179808aafb668e4287de4d030173ba9" kindref="member">vector_find</ref>(vector,<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1gaf1add13716135b33cf3e21f679f7ba17" kindref="member">vector_find_next</ref>(vector,<sp/>i<sp/>+<sp/>1,<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If no such element is in the <emphasis>vector</emphasis> at or after index <emphasis>i</emphasis>, then this will return <computeroutput>SIZE_MAX</computeroutput>. Note that the largest possible index into an array of any type is <computeroutput>SIZE_MAX - 1</computeroutput> so <computeroutput>SIZE_MAX</computeroutput> is an unambiguous indication that no such element is in the <emphasis>vector</emphasis>.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> then the behavior is undefined. As a special case if <emphasis>i</emphasis> is the <emphasis>vector</emphasis>&apos;s length, then will return <computeroutput>SIZE_MAX</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the lowest index in the <emphasis>vector</emphasis> to consider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eqf</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to determine equality </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to pass to <emphasis>eqf</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element on success; otherwise <computeroutput>SIZE_MAX</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="107" column="8" bodyfile="header/vector/search.h" bodystart="107" bodyend="107"/>
        <references refid="group__vector__module_1gac688a8f438657eb30088adccc3a14bb6" compoundref="header_2vector_2search_8c" startline="27" endline="38">vector_find_next_z</references>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gac688a8f438657eb30088adccc3a14bb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_find_next_z</definition>
        <argsstring>(vector_c vector, size_t i, bool(*eqf)(const void *elmt, const void *data), const void *data, size_t z)</argsstring>
        <name>vector_find_next_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool(*)(const void *elmt, const void *data)</type>
          <declname>eqf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Find the first element at or after index <emphasis>i</emphasis> in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return the index of the first element in the <emphasis>vector</emphasis> at or after index <emphasis>i</emphasis> for which the expression <computeroutput>eqf(elmt, data)</computeroutput> is <computeroutput>true</computeroutput> where <emphasis>elmt</emphasis> is the location of an element in the <emphasis>vector</emphasis>. Index <emphasis>i</emphasis> is <bold>inclusive</bold> so if the element at that index is equal to <emphasis>data</emphasis>, then <emphasis>i</emphasis> itself will be returned.</para>
<para>To iterate through all elements in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis> do: <programlisting filename=".c"><codeline><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1gaa886a904776e7c0cc6bdec4eefacd04a" kindref="member">vector_find_z</ref>(vector,<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1gac688a8f438657eb30088adccc3a14bb6" kindref="member">vector_find_next_z</ref>(vector,<sp/>i<sp/>+<sp/>1,<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If no such element is in the <emphasis>vector</emphasis> at or after index <emphasis>i</emphasis>, then this will return <computeroutput>SIZE_MAX</computeroutput>. Note that the largest possible index into an array of any type is <computeroutput>SIZE_MAX - 1</computeroutput> so <computeroutput>SIZE_MAX</computeroutput> is an unambiguous indication that no such element is in the <emphasis>vector</emphasis>.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> then the behavior is undefined. As a special case if <emphasis>i</emphasis> is the <emphasis>vector</emphasis>&apos;s length, then will return <computeroutput>SIZE_MAX</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the lowest index in the <emphasis>vector</emphasis> to consider </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eqf</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to determine equality </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to pass to <emphasis>eqf</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element on success; otherwise <computeroutput>SIZE_MAX</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="145" column="15" bodyfile="header/vector/search.c" bodystart="27" bodyend="38" declfile="header/vector/search.h" declline="145" declcolumn="15"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="group__vector__module_1gaf1add13716135b33cf3e21f679f7ba17" compoundref="search_8h" startline="107" endline="107">vector_find_next</referencedby>
        <referencedby refid="group__vector__module_1gaa886a904776e7c0cc6bdec4eefacd04a" compoundref="header_2vector_2search_8c" startline="19" endline="25">vector_find_z</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga99fa8624e711c5592b80bf2a4b40952d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_find_last</definition>
        <argsstring>(vector_c vector, size_t i, bool(*eqf)(const void *elmt, const void *data), const void *data)</argsstring>
        <name>vector_find_last</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool(*)(const void *elmt, const void *data)</type>
          <declname>eqf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Find the last element before index <emphasis>i</emphasis> in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return the index of the last element in the <emphasis>vector</emphasis> before index <emphasis>i</emphasis> for which the expression <computeroutput>eqf(elmt, data)</computeroutput> is <computeroutput>true</computeroutput> where <emphasis>elmt</emphasis> is the location of an element in the <emphasis>vector</emphasis>. Index <emphasis>i</emphasis> is <bold>exclusive</bold> so this will never return <emphasis>i</emphasis> itself.</para>
<para>To iterate in reverse order through all elements in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis> do: <programlisting filename=".c"><codeline><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1ga99fa8624e711c5592b80bf2a4b40952d" kindref="member">vector_find_last</ref>(vector,<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector),<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>SIZE_MAX)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1ga99fa8624e711c5592b80bf2a4b40952d" kindref="member">vector_find_last</ref>(vector,<sp/>i,<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If no such element is in the <emphasis>vector</emphasis> before index <emphasis>i</emphasis>, then this will return <computeroutput>SIZE_MAX</computeroutput>. Note that the largest possible index into an array of any type is <computeroutput>SIZE_MAX - 1</computeroutput> so <computeroutput>SIZE_MAX</computeroutput> is an unambiguous indication that no such element is in the <emphasis>vector</emphasis>.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in or just after the <emphasis>vector</emphasis> to search before </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eqf</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to determine equality </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to pass to <emphasis>eqf</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element on success; otherwise <computeroutput>SIZE_MAX</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="191" column="8" bodyfile="header/vector/search.h" bodystart="191" bodyend="191"/>
        <references refid="group__vector__module_1ga49accb1745baaa317db375e67e62eb38" compoundref="header_2vector_2search_8c" startline="40" endline="51">vector_find_last_z</references>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga49accb1745baaa317db375e67e62eb38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_find_last_z</definition>
        <argsstring>(vector_c vector, size_t i, bool(*eqf)(const void *elmt, const void *data), const void *data, size_t z)</argsstring>
        <name>vector_find_last_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool(*)(const void *elmt, const void *data)</type>
          <declname>eqf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Find the last element before index <emphasis>i</emphasis> in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return the index of the last element in the <emphasis>vector</emphasis> before index <emphasis>i</emphasis> for which the expression <computeroutput>eqf(elmt, data)</computeroutput> is <computeroutput>true</computeroutput> where <emphasis>elmt</emphasis> is the location of an element in the <emphasis>vector</emphasis>. Index <emphasis>i</emphasis> is <bold>exclusive</bold> so this will never return <emphasis>i</emphasis> itself.</para>
<para>To iterate in reverse order through all elements in the <emphasis>vector</emphasis> equal to <emphasis>data</emphasis> do: <programlisting filename=".c"><codeline><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1ga49accb1745baaa317db375e67e62eb38" kindref="member">vector_find_last_z</ref>(vector,<sp/><ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">vector_length</ref>(vector),<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>SIZE_MAX)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i<sp/>=<sp/><ref refid="group__vector__module_1ga49accb1745baaa317db375e67e62eb38" kindref="member">vector_find_last_z</ref>(vector,<sp/>i,<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If no such element is in the <emphasis>vector</emphasis> before index <emphasis>i</emphasis>, then this will return <computeroutput>SIZE_MAX</computeroutput>. Note that the largest possible index into an array of any type is <computeroutput>SIZE_MAX - 1</computeroutput> so <computeroutput>SIZE_MAX</computeroutput> is an unambiguous indication that no such element is in the <emphasis>vector</emphasis>.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in or just after the <emphasis>vector</emphasis> to search before </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eqf</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to determine equality </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to pass to <emphasis>eqf</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element on success; otherwise <computeroutput>SIZE_MAX</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="228" column="15" bodyfile="header/vector/search.c" bodystart="40" bodyend="51" declfile="header/vector/search.h" declline="228" declcolumn="15"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <referencedby refid="group__vector__module_1ga99fa8624e711c5592b80bf2a4b40952d" compoundref="search_8h" startline="191" endline="191">vector_find_last</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga6785d849e2623b83d30593850f88acc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_search</definition>
        <argsstring>(vector_c vector, const void *elmt, int(*cmpf)(const void *a, const void *b))</argsstring>
        <name>vector_search</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b)</type>
          <declname>cmpf</declname>
        </param>
        <briefdescription>
<para>Find the first element in the sorted <emphasis>vector</emphasis> equal to <emphasis>elmt</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis>vector</emphasis> must be partitioned with respect to <emphasis>elmt</emphasis> according to <emphasis>cmpf</emphasis>. That is, all the elements that compare less than must appear before all the elements that compare equal to, and those must appear before all the elements that compare greater than <emphasis>elmt</emphasis> according to <emphasis>cmpf</emphasis>. A vector sorted by a previous call to <ref refid="group__vector__module_1ga88ac66910378df2bfbdd7bfb26020ba4" kindref="member">vector_sort()</ref> with the same <emphasis>cmpf</emphasis> satisfies these requirements.</para>
<para>The behavior is undefined if the <emphasis>vector</emphasis> is not already partitioned with respect to <emphasis>elmt</emphasis> in ascending order according to <emphasis>cmpf</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to search for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmpf</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to use to determine equality </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index of the element on success; otherwise <computeroutput>SIZE_MAX</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para>vector_search_z() The equivalent operation in the explicit interface </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="260" column="8" bodyfile="header/vector/search.h" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gad34720a16704a4572047cf9efb8cc990" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_search_z</definition>
        <argsstring>(vector_c vector, const void *elmt, int(*cmpf)(const void *a, const void *b), size_t z)</argsstring>
        <name>vector_search_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b)</type>
          <declname>cmpf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/search.h" line="262" column="15" bodyfile="header/vector/search.c" bodystart="53" bodyend="70" declfile="header/vector/search.h" declline="262" declcolumn="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/search.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_SEARCH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_SEARCH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/>@addtogroup<sp/>vector_module<sp/>Vector</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/>@{</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/>@name<sp/>Search</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///<sp/>@{</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>for<sp/>which</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>the<sp/>expression<sp/>&lt;code&gt;eqf(elmt,<sp/>data)&lt;/code&gt;<sp/>is<sp/>@c<sp/>true<sp/>where<sp/>@a<sp/>elmt<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>location<sp/>of<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>this<sp/>will<sp/>return<sp/>@c<sp/>SIZE_MAX.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>largest<sp/>possible<sp/>index<sp/>into<sp/>an<sp/>array<sp/>of<sp/>any<sp/>type<sp/>is</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;SIZE_MAX<sp/>-<sp/>1&lt;/code&gt;<sp/>so<sp/>@c<sp/>SIZE_MAX<sp/>is<sp/>an<sp/>unambiguous<sp/>indication<sp/>that<sp/>no</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@param<sp/>eqf<sp/>the<sp/>function<sp/>to<sp/>use<sp/>to<sp/>determine<sp/>equality</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>additional<sp/>data<sp/>to<sp/>pass<sp/>to<sp/>@a<sp/>eqf</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>SIZE_MAX</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>size_t<sp/>vector_find(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>vector_c<sp/>vector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>bool<sp/>(*eqf)(const<sp/>void<sp/>*elmt,<sp/>const<sp/>void<sp/>*data),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>const<sp/>void<sp/>*data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group__vector__module_1ga6179808aafb668e4287de4d030173ba9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_find(v,<sp/>...)<sp/>vector_find_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>for<sp/>which</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>the<sp/>expression<sp/>&lt;code&gt;eqf(elmt,<sp/>data)&lt;/code&gt;<sp/>is<sp/>@c<sp/>true<sp/>where<sp/>@a<sp/>elmt<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>location<sp/>of<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>this<sp/>will<sp/>return<sp/>@c<sp/>SIZE_MAX.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>largest<sp/>possible<sp/>index<sp/>into<sp/>an<sp/>array<sp/>of<sp/>any<sp/>type<sp/>is</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;SIZE_MAX<sp/>-<sp/>1&lt;/code&gt;<sp/>so<sp/>@c<sp/>SIZE_MAX<sp/>is<sp/>an<sp/>unambiguous<sp/>indication<sp/>that<sp/>no</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@param<sp/>eqf<sp/>the<sp/>function<sp/>to<sp/>use<sp/>to<sp/>determine<sp/>equality</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>additional<sp/>data<sp/>to<sp/>pass<sp/>to<sp/>@a<sp/>eqf</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>SIZE_MAX</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__vector__module_1gaa886a904776e7c0cc6bdec4eefacd04a" kindref="member">vector_find_z</ref>(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*eqf)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1,<sp/>2),<sp/>pure));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>first<sp/>element<sp/>at<sp/>or<sp/>after<sp/>index<sp/>@a<sp/>i<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/>to<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>or<sp/>after</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>index<sp/>@a<sp/>i<sp/>for<sp/>which<sp/>the<sp/>expression<sp/>&lt;code&gt;eqf(elmt,<sp/>data)&lt;/code&gt;<sp/>is<sp/>@c<sp/>true</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>where<sp/>@a<sp/>elmt<sp/>is<sp/>the<sp/>location<sp/>of<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector.<sp/>Index<sp/>@a<sp/>i<sp/>is</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>**inclusive**<sp/>so<sp/>if<sp/>the<sp/>element<sp/>at<sp/>that<sp/>index<sp/>is<sp/>equal<sp/>to<sp/>@a<sp/>data,<sp/>then<sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>itself<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>To<sp/>iterate<sp/>through<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to<sp/>@a<sp/>data<sp/>do:</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@code{.c}</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/>size_t<sp/>i<sp/>=<sp/>vector_find(vector,<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/>while<sp/>(i<sp/>&lt;<sp/>vector_length(vector))<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>vector_find_next(vector,<sp/>i<sp/>+<sp/>1,<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>or<sp/>after<sp/>index<sp/>@a<sp/>i,<sp/>then<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>return<sp/>@c<sp/>SIZE_MAX.<sp/>Note<sp/>that<sp/>the<sp/>largest<sp/>possible<sp/>index<sp/>into<sp/>an<sp/>array<sp/>of<sp/>any</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>type<sp/>is<sp/>&lt;code&gt;SIZE_MAX<sp/>-<sp/>1&lt;/code&gt;<sp/>so<sp/>@c<sp/>SIZE_MAX<sp/>is<sp/>an<sp/>unambiguous<sp/>indication</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>that<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>@length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.<sp/>As<sp/>a<sp/>special<sp/>case<sp/>if<sp/>@a<sp/>i<sp/>is<sp/>the<sp/>&lt;em&gt;vector&lt;/em&gt;&apos;s<sp/>length,<sp/>then</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>will<sp/>return<sp/>@c<sp/>SIZE_MAX.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>lowest<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>consider</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>@param<sp/>eqf<sp/>the<sp/>function<sp/>to<sp/>use<sp/>to<sp/>determine<sp/>equality</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>additional<sp/>data<sp/>to<sp/>pass<sp/>to<sp/>@a<sp/>eqf</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>SIZE_MAX</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>size_t<sp/>vector_find_next(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>vector_c<sp/>vector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>size_t<sp/>i,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>bool<sp/>(*eqf)(const<sp/>void<sp/>*elmt,<sp/>const<sp/>void<sp/>*data),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>const<sp/>void<sp/>*data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="group__vector__module_1gaf1add13716135b33cf3e21f679f7ba17" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_find_next(v,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/>vector_find_next_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>first<sp/>element<sp/>at<sp/>or<sp/>after<sp/>index<sp/>@a<sp/>i<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/><sp/>to<sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>or<sp/>after</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>index<sp/>@a<sp/>i<sp/>for<sp/>which<sp/>the<sp/>expression<sp/>&lt;code&gt;eqf(elmt,<sp/>data)&lt;/code&gt;<sp/>is<sp/>@c<sp/>true</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>where<sp/>@a<sp/>elmt<sp/>is<sp/>the<sp/>location<sp/>of<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector.<sp/>Index<sp/>@a<sp/>i<sp/>is</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>**inclusive**<sp/>so<sp/>if<sp/>the<sp/>element<sp/>at<sp/>that<sp/>index<sp/>is<sp/>equal<sp/>to<sp/>@a<sp/>data,<sp/>then<sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>itself<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>To<sp/>iterate<sp/>through<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to<sp/>@a<sp/>data<sp/>do:</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@code{.c}</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/>size_t<sp/>i<sp/>=<sp/>vector_find_z(vector,<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/>while<sp/>(i<sp/>&lt;<sp/>vector_length(vector))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>vector_find_next_z(vector,<sp/>i<sp/>+<sp/>1,<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>or<sp/>after<sp/>index<sp/>@a<sp/>i,<sp/>then<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>return<sp/>@c<sp/>SIZE_MAX.<sp/>Note<sp/>that<sp/>the<sp/>largest<sp/>possible<sp/>index<sp/>into<sp/>an<sp/>array<sp/>of<sp/>any</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>type<sp/>is<sp/>&lt;code&gt;SIZE_MAX<sp/>-<sp/>1&lt;/code&gt;<sp/>so<sp/>@c<sp/>SIZE_MAX<sp/>is<sp/>an<sp/>unambiguous<sp/>indication</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>that<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>@length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.<sp/>As<sp/>a<sp/>special<sp/>case<sp/>if<sp/>@a<sp/>i<sp/>is<sp/>the<sp/>&lt;em&gt;vector&lt;/em&gt;&apos;s<sp/>length,<sp/>then</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>will<sp/>return<sp/>@c<sp/>SIZE_MAX.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>lowest<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>consider</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param<sp/>eqf<sp/>the<sp/>function<sp/>to<sp/>use<sp/>to<sp/>determine<sp/>equality</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>additional<sp/>data<sp/>to<sp/>pass<sp/>to<sp/>@a<sp/>eqf</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>SIZE_MAX</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__vector__module_1gac688a8f438657eb30088adccc3a14bb6" kindref="member">vector_find_next_z</ref>(</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*eqf)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1,<sp/>3),<sp/>pure));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>last<sp/>element<sp/>before<sp/>index<sp/>@a<sp/>i<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>before<sp/>index</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@a<sp/>i<sp/>for<sp/>which<sp/>the<sp/>expression<sp/>&lt;code&gt;eqf(elmt,<sp/>data)&lt;/code&gt;<sp/>is<sp/>@c<sp/>true<sp/>where</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@a<sp/>elmt<sp/>is<sp/>the<sp/>location<sp/>of<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector.<sp/>Index<sp/>@a<sp/>i<sp/>is</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>**exclusive**<sp/>so<sp/>this<sp/>will<sp/>never<sp/>return<sp/>@a<sp/>i<sp/>itself.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>To<sp/>iterate<sp/>in<sp/>reverse<sp/>order<sp/>through<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@a<sp/>data<sp/>do:</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@code{.c}</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/><sp/>size_t<sp/>i<sp/>=<sp/>vector_find_last(vector,<sp/>vector_length(vector),<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/>while<sp/>(i<sp/>&lt;<sp/>SIZE_MAX)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>vector_find_last(vector,<sp/>i,<sp/>eqf,<sp/>data);</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>before<sp/>index<sp/>@a<sp/>i,<sp/>then<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>return<sp/>@c<sp/>SIZE_MAX.<sp/>Note<sp/>that<sp/>the<sp/>largest<sp/>possible<sp/>index<sp/>into<sp/>an<sp/>array<sp/>of<sp/>any</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>type<sp/>is<sp/>&lt;code&gt;SIZE_MAX<sp/>-<sp/>1&lt;/code&gt;<sp/>so<sp/>@c<sp/>SIZE_MAX<sp/>is<sp/>an<sp/>unambiguous<sp/>indication</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>that<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>@length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>in<sp/>or<sp/>just<sp/>after<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>search<sp/>before</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param<sp/>eqf<sp/>the<sp/>function<sp/>to<sp/>use<sp/>to<sp/>determine<sp/>equality</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>additional<sp/>data<sp/>to<sp/>pass<sp/>to<sp/>@a<sp/>eqf</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>SIZE_MAX</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>size_t<sp/>vector_find_last(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>vector_c<sp/>vector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>size_t<sp/>i,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>bool<sp/>(*eqf)(const<sp/>void<sp/>*elmt,<sp/>const<sp/>void<sp/>*data),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>const<sp/>void<sp/>*data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="group__vector__module_1ga99fa8624e711c5592b80bf2a4b40952d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_find_last(v,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/>vector_find_last_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>last<sp/>element<sp/>before<sp/>index<sp/>@a<sp/>i<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@a<sp/>data</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>before<sp/>index</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@a<sp/>i<sp/>for<sp/>which<sp/>the<sp/>expression<sp/>&lt;code&gt;eqf(elmt,<sp/>data)&lt;/code&gt;<sp/>is<sp/>@c<sp/>true<sp/>where</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@a<sp/>elmt<sp/>is<sp/>the<sp/>location<sp/>of<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector.<sp/>Index<sp/>@a<sp/>i<sp/>is</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>**exclusive**<sp/>so<sp/>this<sp/>will<sp/>never<sp/>return<sp/>@a<sp/>i<sp/>itself.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>To<sp/>iterate<sp/>in<sp/>reverse<sp/>order<sp/>through<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@a<sp/>data<sp/>do:</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@code{.c}</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/><sp/>size_t<sp/>i<sp/>=<sp/>vector_find_last_z(vector,<sp/>vector_length(vector),<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/>while<sp/>(i<sp/>&lt;<sp/>SIZE_MAX)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>vector_find_last_z(vector,<sp/>i,<sp/>eqf,<sp/>data,<sp/>z);</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>before<sp/>index<sp/>@a<sp/>i,<sp/>then<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>return<sp/>@c<sp/>SIZE_MAX.<sp/>Note<sp/>that<sp/>the<sp/>largest<sp/>possible<sp/>index<sp/>into<sp/>an<sp/>array<sp/>of<sp/>any</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>type<sp/>is<sp/>&lt;code&gt;SIZE_MAX<sp/>-<sp/>1&lt;/code&gt;<sp/>so<sp/>@c<sp/>SIZE_MAX<sp/>is<sp/>an<sp/>unambiguous<sp/>indication</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>that<sp/>no<sp/>such<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>@length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>in<sp/>or<sp/>just<sp/>after<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>search<sp/>before</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>@param<sp/>eqf<sp/>the<sp/>function<sp/>to<sp/>use<sp/>to<sp/>determine<sp/>equality</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>additional<sp/>data<sp/>to<sp/>pass<sp/>to<sp/>@a<sp/>eqf</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>SIZE_MAX</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__vector__module_1ga49accb1745baaa317db375e67e62eb38" kindref="member">vector_find_last_z</ref>(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(*eqf)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1,<sp/>3),<sp/>pure));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>sorted<sp/>@a<sp/>vector<sp/>equal<sp/>to<sp/>@a<sp/>elmt</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>The<sp/>@a<sp/>vector<sp/>must<sp/>be<sp/>partitioned<sp/>with<sp/>respect<sp/>to<sp/>@a<sp/>elmt<sp/>according<sp/>to</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@a<sp/>cmpf.<sp/>That<sp/>is,<sp/>all<sp/>the<sp/>elements<sp/>that<sp/>compare<sp/>less<sp/>than<sp/>must<sp/>appear<sp/>before</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>all<sp/>the<sp/>elements<sp/>that<sp/>compare<sp/>equal<sp/>to,<sp/>and<sp/>those<sp/>must<sp/>appear<sp/>before<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>elements<sp/>that<sp/>compare<sp/>greater<sp/>than<sp/>@a<sp/>elmt<sp/>according<sp/>to<sp/>@a<sp/>cmpf.<sp/>A<sp/>vector</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>sorted<sp/>by<sp/>a<sp/>previous<sp/>call<sp/>to<sp/>vector_sort()<sp/>with<sp/>the<sp/>same<sp/>@a<sp/>cmpf<sp/>satisfies</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>these<sp/>requirements.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>The<sp/>behavior<sp/>is<sp/>undefined<sp/>if<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>not<sp/>already<sp/>partitioned<sp/>with</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>respect<sp/>to<sp/>@a<sp/>elmt<sp/>in<sp/>ascending<sp/>order<sp/>according<sp/>to<sp/>@a<sp/>cmpf.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>element<sp/>to<sp/>search<sp/>for</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmpf<sp/>the<sp/>function<sp/>to<sp/>use<sp/>to<sp/>determine<sp/>equality</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>SIZE_MAX</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_search_z()<sp/>The<sp/>equivalent<sp/>operation<sp/>in<sp/>the<sp/>explicit<sp/>interface</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>size_t<sp/>vector_search(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_c<sp/>vector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>const<sp/>void<sp/>*elmt,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>int<sp/>(*cmpf)(const<sp/>void<sp/>*a,<sp/>const<sp/>void<sp/>*b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group__vector__module_1ga6785d849e2623b83d30593850f88acc7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_search(v,<sp/>...)<sp/>vector_search_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vector_search_z(</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*cmpf)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1,<sp/>3),<sp/>pure));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">///<sp/>@}</highlight></codeline>
<codeline lineno="274"><highlight class="comment">///<sp/>@}</highlight></codeline>
<codeline lineno="275"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_SEARCH_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="source_2vector_2search_8c" kindref="compound">search.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/search.h"/>
  </compounddef>
</doxygen>
