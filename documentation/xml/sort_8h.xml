<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="sort_8h" kind="file" language="C++">
    <compoundname>sort.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="header_2vector_2sort_8c" local="yes">sort.c</includes>
    <includedby refid="vector_8h" local="yes">header/vector.h</includedby>
    <includedby refid="header_2vector_2sort_8c" local="yes">header/vector/sort.c</includedby>
    <incdepgraph>
      <node id="6">
        <label>sort.c</label>
        <link refid="header_2vector_2sort_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/sort.h</label>
        <link refid="sort_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdalign.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>header/vector/sort.c</label>
        <link refid="header_2vector_2sort_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/sort.h</label>
        <link refid="sort_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>Sorting</header>
      <memberdef kind="function" id="group__vector__module_1ga88ac66910378df2bfbdd7bfb26020ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_sort</definition>
        <argsstring>(vector_t vector, int(*cmp)(const void *a, const void *b))</argsstring>
        <name>vector_sort</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b)</type>
          <declname>cmp</declname>
        </param>
        <briefdescription>
<para>Sort the <emphasis>vector</emphasis> in ascending order on a comparator. </para>
        </briefdescription>
        <detaileddescription>
<para>This isn&apos;t a stable sort: if <emphasis>cmp</emphasis> indicates that two elements are equal, their relative order in the result is unspecified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>The comparator that will be called to establish the relative order of two elements.</para>
<para>This should return a negative integer if <emphasis>a</emphasis> is less than (should come before) <emphasis>b</emphasis>, a positive integer if <emphasis>a</emphasis> is greater than (should come after) <emphasis>b</emphasis>, and zero if <emphasis>a</emphasis> and <emphasis>b</emphasis> are equal. It must return consistent results when called for the same elements, regardless of their indices in the vector.</para>
<para>This function must encode a <bold>strict total order</bold> of the elements in the <emphasis>vector</emphasis>. That is, for any elements <computeroutput>a</computeroutput>, <computeroutput>b</computeroutput>, and <computeroutput>c</computeroutput>:</para>
<para><itemizedlist>
<listitem><para><formula id="3">$a = a$</formula></para>
</listitem><listitem><para>If <formula id="4">$a = b$</formula> and <formula id="5">$b = c$</formula> then <formula id="6">$a = c$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> then <formula id="8">$b &gt; a$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> and <formula id="9">$b &lt; c$</formula> then <formula id="10">$a &lt; c$</formula> </para>
</listitem></itemizedlist>
</para>
</parblock></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/sort.h" line="45" column="6" bodyfile="header/vector/sort.h" bodystart="45" bodyend="45"/>
        <references refid="group__vector__module_1ga067d26fd8360e1460ff64a088dd87864" compoundref="header_2vector_2sort_8c" startline="16" endline="21">vector_sort_z</references>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1ga067d26fd8360e1460ff64a088dd87864" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_sort_z</definition>
        <argsstring>(vector_t vector, int(*cmp)(const void *a, const void *b), size_t z)</argsstring>
        <name>vector_sort_z</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b)</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Sort the <emphasis>vector</emphasis> in ascending order on a comparator. </para>
        </briefdescription>
        <detaileddescription>
<para>This isn&apos;t a stable sort: if <emphasis>cmp</emphasis> indicates that two elements are equal, their relative order in the result is unspecified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>The comparator that will be called to establish the relative order of two elements.</para>
<para>This should return a negative integer if <emphasis>a</emphasis> is less than (should come before) <emphasis>b</emphasis>, a positive integer if <emphasis>a</emphasis> is greater than (should come after) <emphasis>b</emphasis>, and zero if <emphasis>a</emphasis> and <emphasis>b</emphasis> are equal. It must return consistent results when called for the same elements, regardless of their indices in the vector.</para>
<para>This function must encode a <bold>strict total order</bold> of the elements in the <emphasis>vector</emphasis>. That is, for any elements <computeroutput>a</computeroutput>, <computeroutput>b</computeroutput>, and <computeroutput>c</computeroutput>:</para>
<para><itemizedlist>
<listitem><para><formula id="3">$a = a$</formula></para>
</listitem><listitem><para>If <formula id="4">$a = b$</formula> and <formula id="5">$b = c$</formula> then <formula id="6">$a = c$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> then <formula id="8">$b &gt; a$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> and <formula id="9">$b &lt; c$</formula> then <formula id="10">$a &lt; c$</formula> </para>
</listitem></itemizedlist>
</para>
</parblock></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/sort.h" line="74" column="13" bodyfile="header/vector/sort.c" bodystart="16" bodyend="21" declfile="header/vector/sort.h" declline="74" declcolumn="13"/>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="group__vector__module_1ga88ac66910378df2bfbdd7bfb26020ba4" compoundref="sort_8h" startline="45" endline="45">vector_sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gadb8a360380b1c613127e91cbff53d07b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_sort_with</definition>
        <argsstring>(vector_t vector, int(*cmp)(const void *a, const void *b, void *data), void *data)</argsstring>
        <name>vector_sort_with</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b, void *data)</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sort the <emphasis>vector</emphasis> in ascending order on a contextual comparator. </para>
        </briefdescription>
        <detaileddescription>
<para>This isn&apos;t a stable sort: if <emphasis>cmp</emphasis> indicates that two elements are equal, their relative order in the result is unspecified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>The comparator that will be called to establish the relative order of two elements.</para>
<para>This should return a negative integer if <emphasis>a</emphasis> is less than (should come before) <emphasis>b</emphasis>, a positive integer if <emphasis>a</emphasis> is greater than (should come after) <emphasis>b</emphasis>, and zero if <emphasis>a</emphasis> and <emphasis>b</emphasis> are equal. It must return consistent results when called for the same elements, regardless of their indices in the vector.</para>
<para>This function must encode a <bold>strict total order</bold> of the elements in the <emphasis>vector</emphasis>. That is, for any elements <computeroutput>a</computeroutput>, <computeroutput>b</computeroutput>, and <computeroutput>c</computeroutput>:</para>
<para><itemizedlist>
<listitem><para><formula id="3">$a = a$</formula></para>
</listitem><listitem><para>If <formula id="4">$a = b$</formula> and <formula id="5">$b = c$</formula> then <formula id="6">$a = c$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> then <formula id="8">$b &gt; a$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> and <formula id="9">$b &lt; c$</formula> then <formula id="10">$a &lt; c$</formula> </para>
</listitem></itemizedlist>
</para>
</parblock></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>contextual information to pass as the last argument to <emphasis>cmp</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/sort.h" line="111" column="6" bodyfile="header/vector/sort.h" bodystart="111" bodyend="111"/>
        <references refid="group__vector__module_1gabc2195a7f9b5a23c2d6aa1b7f17f47c6">vector_sort_with_z</references>
      </memberdef>
      <memberdef kind="function" id="group__vector__module_1gabc2195a7f9b5a23c2d6aa1b7f17f47c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_sort_with_z</definition>
        <argsstring>(vector_t vector, int(*cmp)(const void *a, const void *b, void *data), void *data, size_t z)</argsstring>
        <name>vector_sort_with_z</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>int(*)(const void *a, const void *b, void *data)</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Sort the <emphasis>vector</emphasis> in ascending order on a contextual comparator. </para>
        </briefdescription>
        <detaileddescription>
<para>This isn&apos;t a stable sort: if <emphasis>cmp</emphasis> indicates that two elements are equal, their relative order in the result is unspecified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para><parblock><para>The comparator that will be called to establish the relative order of two elements.</para>
<para>This should return a negative integer if <emphasis>a</emphasis> is less than (should come before) <emphasis>b</emphasis>, a positive integer if <emphasis>a</emphasis> is greater than (should come after) <emphasis>b</emphasis>, and zero if <emphasis>a</emphasis> and <emphasis>b</emphasis> are equal. It must return consistent results when called for the same elements, regardless of their indices in the vector.</para>
<para>This function must encode a <bold>strict total order</bold> of the elements in the <emphasis>vector</emphasis>. That is, for any elements <computeroutput>a</computeroutput>, <computeroutput>b</computeroutput>, and <computeroutput>c</computeroutput>:</para>
<para><itemizedlist>
<listitem><para><formula id="3">$a = a$</formula></para>
</listitem><listitem><para>If <formula id="4">$a = b$</formula> and <formula id="5">$b = c$</formula> then <formula id="6">$a = c$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> then <formula id="8">$b &gt; a$</formula></para>
</listitem><listitem><para>If <formula id="7">$a &lt; b$</formula> and <formula id="9">$b &lt; c$</formula> then <formula id="10">$a &lt; c$</formula> </para>
</listitem></itemizedlist>
</para>
</parblock></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>contextual information to pass as the last argument to <emphasis>cmp</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/sort.h" line="142" column="6" declfile="header/vector/sort.h" declline="142" declcolumn="6"/>
        <referencedby refid="group__vector__module_1gadb8a360380b1c613127e91cbff53d07b" compoundref="sort_8h" startline="111" endline="111">vector_sort_with</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/sort.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_SORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_SORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">///<sp/>@addtogroup<sp/>vector_module<sp/>Vector</highlight></codeline>
<codeline lineno="14"><highlight class="comment">///<sp/>@{</highlight></codeline>
<codeline lineno="15"><highlight class="comment">///<sp/>@name<sp/>Sorting</highlight></codeline>
<codeline lineno="16"><highlight class="comment">///<sp/>@{</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sort<sp/>the<sp/>@a<sp/>vector<sp/>in<sp/>ascending<sp/>order<sp/>on<sp/>a<sp/>comparator</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>This<sp/>isn&apos;t<sp/>a<sp/>stable<sp/>sort:<sp/>if<sp/>@a<sp/>cmp<sp/>indicates<sp/>that<sp/>two<sp/>elements<sp/>are<sp/>equal,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>their<sp/>relative<sp/>order<sp/>in<sp/>the<sp/>result<sp/>is<sp/>unspecified.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmp<sp/>@parblock</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/>The<sp/>comparator<sp/>that<sp/>will<sp/>be<sp/>called<sp/>to<sp/>establish<sp/>the<sp/>relative<sp/>order<sp/>of<sp/>two</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/>elements.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>should<sp/>return<sp/>a<sp/>negative<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>less<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/>before)<sp/>@a<sp/>b,<sp/>a<sp/>positive<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>greater<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/>after)<sp/>@a<sp/>b,<sp/>and<sp/>zero<sp/>if<sp/>@a<sp/>a<sp/>and<sp/>@a<sp/>b<sp/>are<sp/>equal.<sp/>It<sp/>must<sp/>return<sp/>consistent</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/>results<sp/>when<sp/>called<sp/>for<sp/>the<sp/>same<sp/>elements,<sp/>regardless<sp/>of<sp/>their<sp/>indices<sp/>in</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>vector.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>function<sp/>must<sp/>encode<sp/>a<sp/>&lt;b&gt;strict<sp/>total<sp/>order&lt;/b&gt;<sp/>of<sp/>the<sp/>elements<sp/>in</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>@a<sp/>vector.<sp/>That<sp/>is,<sp/>for<sp/>any<sp/>elements<sp/>@c<sp/>a,<sp/>@c<sp/>b,<sp/>and<sp/>&lt;tt&gt;c&lt;/tt&gt;:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>@f$a<sp/>=<sp/>a@f$</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>=<sp/>b@f$<sp/>and<sp/>@f$b<sp/>=<sp/>c@f$<sp/>then<sp/>@f$a<sp/>=<sp/>c@f$</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>then<sp/>@f$b<sp/>&gt;<sp/>a@f$</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>and<sp/>@f$b<sp/>&lt;<sp/>c@f$<sp/>then<sp/>@f$a<sp/>&lt;<sp/>c@f$</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@endparblock</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>void<sp/>vector_sort(vector_t<sp/>vector,<sp/>int<sp/>(*cmp)(const<sp/>void<sp/>*a,<sp/>const<sp/>void<sp/>*b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="group__vector__module_1ga88ac66910378df2bfbdd7bfb26020ba4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_sort(v,<sp/>...)<sp/>vector_sort_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sort<sp/>the<sp/>@a<sp/>vector<sp/>in<sp/>ascending<sp/>order<sp/>on<sp/>a<sp/>comparator</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>This<sp/>isn&apos;t<sp/>a<sp/>stable<sp/>sort:<sp/>if<sp/>@a<sp/>cmp<sp/>indicates<sp/>that<sp/>two<sp/>elements<sp/>are<sp/>equal,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>their<sp/>relative<sp/>order<sp/>in<sp/>the<sp/>result<sp/>is<sp/>unspecified.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmp<sp/>@parblock</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/>The<sp/>comparator<sp/>that<sp/>will<sp/>be<sp/>called<sp/>to<sp/>establish<sp/>the<sp/>relative<sp/>order<sp/>of<sp/>two</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/>elements.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>should<sp/>return<sp/>a<sp/>negative<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>less<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/>before)<sp/>@a<sp/>b,<sp/>a<sp/>positive<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>greater<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/>after)<sp/>@a<sp/>b,<sp/>and<sp/>zero<sp/>if<sp/>@a<sp/>a<sp/>and<sp/>@a<sp/>b<sp/>are<sp/>equal.<sp/>It<sp/>must<sp/>return<sp/>consistent</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/>results<sp/>when<sp/>called<sp/>for<sp/>the<sp/>same<sp/>elements,<sp/>regardless<sp/>of<sp/>their<sp/>indices<sp/>in</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>vector.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>function<sp/>must<sp/>encode<sp/>a<sp/>&lt;b&gt;strict<sp/>total<sp/>order&lt;/b&gt;<sp/>of<sp/>the<sp/>elements<sp/>in</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>@a<sp/>vector.<sp/>That<sp/>is,<sp/>for<sp/>any<sp/>elements<sp/>@c<sp/>a,<sp/>@c<sp/>b,<sp/>and<sp/>&lt;tt&gt;c&lt;/tt&gt;:</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>@f$a<sp/>=<sp/>a@f$</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>=<sp/>b@f$<sp/>and<sp/>@f$b<sp/>=<sp/>c@f$<sp/>then<sp/>@f$a<sp/>=<sp/>c@f$</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>then<sp/>@f$b<sp/>&gt;<sp/>a@f$</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>and<sp/>@f$b<sp/>&lt;<sp/>c@f$<sp/>then<sp/>@f$a<sp/>&lt;<sp/>c@f$</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@endparblock</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__vector__module_1ga067d26fd8360e1460ff64a088dd87864" kindref="member">vector_sort_z</ref>(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*cmp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>__attribute__((nonnull));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sort<sp/>the<sp/>@a<sp/>vector<sp/>in<sp/>ascending<sp/>order<sp/>on<sp/>a<sp/>contextual<sp/>comparator</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>This<sp/>isn&apos;t<sp/>a<sp/>stable<sp/>sort:<sp/>if<sp/>@a<sp/>cmp<sp/>indicates<sp/>that<sp/>two<sp/>elements<sp/>are<sp/>equal,</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>their<sp/>relative<sp/>order<sp/>in<sp/>the<sp/>result<sp/>is<sp/>unspecified.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmp<sp/>@parblock</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/>The<sp/>comparator<sp/>that<sp/>will<sp/>be<sp/>called<sp/>to<sp/>establish<sp/>the<sp/>relative<sp/>order<sp/>of<sp/>two</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/>elements.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>should<sp/>return<sp/>a<sp/>negative<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>less<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/>before)<sp/>@a<sp/>b,<sp/>a<sp/>positive<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>greater<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/>after)<sp/>@a<sp/>b,<sp/>and<sp/>zero<sp/>if<sp/>@a<sp/>a<sp/>and<sp/>@a<sp/>b<sp/>are<sp/>equal.<sp/>It<sp/>must<sp/>return<sp/>consistent</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/>results<sp/>when<sp/>called<sp/>for<sp/>the<sp/>same<sp/>elements,<sp/>regardless<sp/>of<sp/>their<sp/>indices<sp/>in</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>vector.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>function<sp/>must<sp/>encode<sp/>a<sp/>&lt;b&gt;strict<sp/>total<sp/>order&lt;/b&gt;<sp/>of<sp/>the<sp/>elements<sp/>in</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>@a<sp/>vector.<sp/>That<sp/>is,<sp/>for<sp/>any<sp/>elements<sp/>@c<sp/>a,<sp/>@c<sp/>b,<sp/>and<sp/>&lt;tt&gt;c&lt;/tt&gt;:</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>@f$a<sp/>=<sp/>a@f$</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>=<sp/>b@f$<sp/>and<sp/>@f$b<sp/>=<sp/>c@f$<sp/>then<sp/>@f$a<sp/>=<sp/>c@f$</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>then<sp/>@f$b<sp/>&gt;<sp/>a@f$</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>and<sp/>@f$b<sp/>&lt;<sp/>c@f$<sp/>then<sp/>@f$a<sp/>&lt;<sp/>c@f$</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@endparblock</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>contextual<sp/>information<sp/>to<sp/>pass<sp/>as<sp/>the<sp/>last<sp/>argument<sp/>to<sp/>@a<sp/>cmp</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>void<sp/>vector_sort_with(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>vector_t<sp/>vector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>int<sp/>(*cmp)(const<sp/>void<sp/>*a,<sp/>const<sp/>void<sp/>*b,<sp/>void<sp/>*data),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/><sp/><sp/>void<sp/>*data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="group__vector__module_1gadb8a360380b1c613127e91cbff53d07b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_sort_with(v,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>vector_sort_with_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sort<sp/>the<sp/>@a<sp/>vector<sp/>in<sp/>ascending<sp/>order<sp/>on<sp/>a<sp/>contextual<sp/>comparator</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>This<sp/>isn&apos;t<sp/>a<sp/>stable<sp/>sort:<sp/>if<sp/>@a<sp/>cmp<sp/>indicates<sp/>that<sp/>two<sp/>elements<sp/>are<sp/>equal,</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>their<sp/>relative<sp/>order<sp/>in<sp/>the<sp/>result<sp/>is<sp/>unspecified.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@param<sp/>cmp<sp/>@parblock</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/>The<sp/>comparator<sp/>that<sp/>will<sp/>be<sp/>called<sp/>to<sp/>establish<sp/>the<sp/>relative<sp/>order<sp/>of<sp/>two</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/>elements.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>should<sp/>return<sp/>a<sp/>negative<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>less<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/><sp/>before)<sp/>@a<sp/>b,<sp/>a<sp/>positive<sp/>integer<sp/>if<sp/>@a<sp/>a<sp/>is<sp/>greater<sp/>than<sp/>(should<sp/>come</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/>after)<sp/>@a<sp/>b,<sp/>and<sp/>zero<sp/>if<sp/>@a<sp/>a<sp/>and<sp/>@a<sp/>b<sp/>are<sp/>equal.<sp/>It<sp/>must<sp/>return<sp/>consistent</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/>results<sp/>when<sp/>called<sp/>for<sp/>the<sp/>same<sp/>elements,<sp/>regardless<sp/>of<sp/>their<sp/>indices<sp/>in</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>vector.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>function<sp/>must<sp/>encode<sp/>a<sp/>&lt;b&gt;strict<sp/>total<sp/>order&lt;/b&gt;<sp/>of<sp/>the<sp/>elements<sp/>in</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>@a<sp/>vector.<sp/>That<sp/>is,<sp/>for<sp/>any<sp/>elements<sp/>@c<sp/>a,<sp/>@c<sp/>b,<sp/>and<sp/>&lt;tt&gt;c&lt;/tt&gt;:</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>@f$a<sp/>=<sp/>a@f$</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>=<sp/>b@f$<sp/>and<sp/>@f$b<sp/>=<sp/>c@f$<sp/>then<sp/>@f$a<sp/>=<sp/>c@f$</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>then<sp/>@f$b<sp/>&gt;<sp/>a@f$</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>@f$a<sp/>&lt;<sp/>b@f$<sp/>and<sp/>@f$b<sp/>&lt;<sp/>c@f$<sp/>then<sp/>@f$a<sp/>&lt;<sp/>c@f$</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@endparblock</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param<sp/>data<sp/>contextual<sp/>information<sp/>to<sp/>pass<sp/>as<sp/>the<sp/>last<sp/>argument<sp/>to<sp/>@a<sp/>cmp</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group__vector__module_1gabc2195a7f9b5a23c2d6aa1b7f17f47c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__vector__module_1gabc2195a7f9b5a23c2d6aa1b7f17f47c6" kindref="member">vector_sort_with_z</ref>(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*cmp)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1,<sp/>2)));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">///<sp/>@}</highlight></codeline>
<codeline lineno="154"><highlight class="comment">///<sp/>@}</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_SORT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="source_2vector_2sort_8c" kindref="compound">sort.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/sort.h"/>
  </compounddef>
</doxygen>
