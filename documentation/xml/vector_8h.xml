<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="vector_8h" kind="file" language="C++">
    <compoundname>vector.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">vector/common.h</includes>
    <includes refid="access_8h" local="yes">vector/access.h</includes>
    <includes refid="comparison_8h" local="yes">vector/comparison.h</includes>
    <includes refid="create_8h" local="yes">vector/create.h</includes>
    <includes refid="debug_8h" local="yes">vector/debug.h</includes>
    <includes refid="delete_8h" local="yes">vector/delete.h</includes>
    <includes refid="insert_8h" local="yes">vector/insert.h</includes>
    <includes refid="move_8h" local="yes">vector/move.h</includes>
    <includes refid="remove_8h" local="yes">vector/remove.h</includes>
    <includes refid="resize_8h" local="yes">vector/resize.h</includes>
    <includes refid="search_8h" local="yes">vector/search.h</includes>
    <includes refid="shift_8h" local="yes">vector/shift.h</includes>
    <includes refid="sort_8h" local="yes">vector/sort.h</includes>
    <incdepgraph>
      <node id="35">
        <label>sort.c</label>
        <link refid="header_2vector_2sort_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>stdbool.h</label>
      </node>
      <node id="34">
        <label>vector/sort.h</label>
        <link refid="sort_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdalign.h</label>
      </node>
      <node id="30">
        <label>search.c</label>
        <link refid="header_2vector_2search_8c"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>vector/search.h</label>
        <link refid="search_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>errno.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="27">
        <label>remove.c</label>
        <link refid="header_2vector_2remove_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>vector/remove.h</label>
        <link refid="remove_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>insert.c</label>
        <link refid="header_2vector_2insert_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>vector/insert.h</label>
        <link refid="insert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>create.c</label>
        <link refid="header_2vector_2create_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>vector/create.h</label>
        <link refid="create_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>shift.c</label>
        <link refid="header_2vector_2shift_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>vector/shift.h</label>
        <link refid="shift_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vector/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>move.c</label>
        <link refid="header_2vector_2move_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>vector/move.h</label>
        <link refid="move_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>comparison.c</label>
        <link refid="header_2vector_2comparison_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vector/comparison.h</label>
        <link refid="comparison_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>delete.c</label>
        <link refid="header_2vector_2delete_8c"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>vector/delete.h</label>
        <link refid="delete_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdio.h</label>
      </node>
      <node id="23">
        <label>resize.c</label>
        <link refid="header_2vector_2resize_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>resize.h</label>
        <link refid="resize_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>debug.c</label>
        <link refid="header_2vector_2debug_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>vector/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector_8h_1a28458b3a0c0444009b78fe53a4d42ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_duplicate_z</definition>
        <argsstring>(vector_c source, size_t z)</argsstring>
        <name>vector_duplicate_z</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize a vector by duplicating <emphasis>source</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempt to create a vector with the same volume and length as <emphasis>source</emphasis>. If this fails and the length of <emphasis>source</emphasis> is less than its volume then attempt to create a vector with the same length as <emphasis>source</emphasis>.</para>
<para>If either of these are successful then memcpy() each element in <emphasis>source</emphasis> into the new vector.</para>
<para>If this fails then it will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput>.</para>
<para><simplesect kind="return"><para>the vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="vector_8h_1a3bf16868a790b080aec82fa674991d38" kindref="member">vector_duplicate()</ref> - The implicit interface analogue </para>
</simplesect>
<simplesect kind="see"><para><ref refid="vector_8h_1a28458b3a0c0444009b78fe53a4d42ebc" kindref="member">vector_duplicate_z()</ref> - The explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector.h" line="52" column="10" bodyfile="source/vector.c" bodystart="9" bodyend="27" declfile="header/vector.h" declline="52" declcolumn="10"/>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <references refid="common_8h_1aa15669c7ce377e2da885ecace1d69242" compoundref="common_8h" startline="91" endline="93">vector_volume</references>
        <referencedby refid="vector_8h_1a3bf16868a790b080aec82fa674991d38" compoundref="vector_8h" startline="57" endline="57">vector_duplicate</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3bf16868a790b080aec82fa674991d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_duplicate</definition>
        <argsstring>(vector_c source)</argsstring>
        <name>vector_duplicate</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize a vector by duplicating <emphasis>source</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempt to create a vector with the same volume and length as <emphasis>source</emphasis>. If this fails and the length of <emphasis>source</emphasis> is less than its volume then attempt to create a vector with the same length as <emphasis>source</emphasis>.</para>
<para>If either of these are successful then memcpy() each element in <emphasis>source</emphasis> into the new vector.</para>
<para>If this fails then it will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput>.</para>
<para><simplesect kind="return"><para>the vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="vector_8h_1a3bf16868a790b080aec82fa674991d38" kindref="member">vector_duplicate()</ref> - The implicit interface analogue </para>
</simplesect>
<simplesect kind="see"><para><ref refid="vector_8h_1a28458b3a0c0444009b78fe53a4d42ebc" kindref="member">vector_duplicate_z()</ref> - The explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector.h" line="57" column="10" bodyfile="header/vector.h" bodystart="57" bodyend="57"/>
        <references refid="vector_8h_1a28458b3a0c0444009b78fe53a4d42ebc" compoundref="vector_8c" startline="9" endline="27">vector_duplicate_z</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A vector is a dynamic array that behaves similar to a C array. In fact a vector and a C array.</para>
<para>The operations available on a vector are roughly split into two interfaces: an implicit interface and an explicit interface.</para>
<para>Most operations in the explicit interface have a <computeroutput>_z</computeroutput> suffix and have an equivalent operation in the implicit interface without that suffix.</para>
<para>Implicit interface operations</para>
<para>When the element type of a vector is determinate at compile the the implicit interface should be used.</para>
<para>Most vector operations have two forms. One with a <computeroutput>_z</computeroutput> suffix and one without. The one with a <computeroutput>_z</computeroutput> suffix has an explicit <computeroutput>z</computeroutput> argument that specifies the element size of the vector. The one without the suffix automatically deduces the element size of the vector.</para>
<para>Most operations take a vector as an argument. Unless otherwise specified in the documentation of a specific operation, if the given vector is <emphasis>NULL</emphasis> then the behavior is undefined. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file<sp/>header/vector.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>A<sp/>vector<sp/>is<sp/>a<sp/>dynamic<sp/>array<sp/>that<sp/>behaves<sp/>similar<sp/>to<sp/>a<sp/>C<sp/>array.<sp/>In<sp/>fact<sp/>a</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>vector<sp/>and<sp/>a<sp/>C<sp/>array.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>The<sp/>operations<sp/>available<sp/>on<sp/>a<sp/>vector<sp/>are<sp/>roughly<sp/>split<sp/>into<sp/>two<sp/>interfaces:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>an<sp/>implicit<sp/>interface<sp/>and<sp/>an<sp/>explicit<sp/>interface.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Most<sp/>operations<sp/>in<sp/>the<sp/>explicit<sp/>interface<sp/>have<sp/>a<sp/>@c<sp/>_z<sp/>suffix<sp/>and<sp/>have<sp/>an</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>equivalent<sp/>operation<sp/>in<sp/>the<sp/>implicit<sp/>interface<sp/>without<sp/>that<sp/>suffix.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Implicit<sp/>interface<sp/>operations</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>When<sp/>the<sp/>element<sp/>type<sp/>of<sp/>a<sp/>vector<sp/>is<sp/>determinate<sp/>at<sp/>compile<sp/>the<sp/>the<sp/>implicit</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>interface<sp/>should<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Most<sp/>vector<sp/>operations<sp/>have<sp/>two<sp/>forms.<sp/>One<sp/>with<sp/>a<sp/>@c<sp/>_z<sp/>suffix<sp/>and<sp/>one</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>without.<sp/>The<sp/>one<sp/>with<sp/>a<sp/>@c<sp/>_z<sp/>suffix<sp/>has<sp/>an<sp/>explicit<sp/>@c<sp/>z<sp/>argument<sp/>that</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>specifies<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>vector.<sp/>The<sp/>one<sp/>without<sp/>the<sp/>suffix</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>automatically<sp/>deduces<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>vector.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Most<sp/>operations<sp/>take<sp/>a<sp/>vector<sp/>as<sp/>an<sp/>argument.<sp/>Unless<sp/>otherwise<sp/>specified<sp/>in</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>the<sp/>documentation<sp/>of<sp/>a<sp/>specific<sp/>operation,<sp/>if<sp/>the<sp/>given<sp/>vector<sp/>is<sp/>@a<sp/>NULL</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">vector/common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocate<sp/>and<sp/>initialize<sp/>a<sp/>vector<sp/>by<sp/>duplicating<sp/>@a<sp/>source</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>Attempt<sp/>to<sp/>create<sp/>a<sp/>vector<sp/>with<sp/>the<sp/>same<sp/>volume<sp/>and<sp/>length<sp/>as<sp/>@a<sp/>source.<sp/>If</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>this<sp/>fails<sp/>and<sp/>the<sp/>length<sp/>of<sp/>@a<sp/>source<sp/>is<sp/>less<sp/>than<sp/>its<sp/>volume<sp/>then<sp/>attempt</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>to<sp/>create<sp/>a<sp/>vector<sp/>with<sp/>the<sp/>same<sp/>length<sp/>as<sp/>@a<sp/>source.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>If<sp/>either<sp/>of<sp/>these<sp/>are<sp/>successful<sp/>then<sp/>memcpy()<sp/>each<sp/>element<sp/>in<sp/>@a<sp/>source</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>into<sp/>the<sp/>new<sp/>vector.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>fails<sp/>then<sp/>it<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_duplicate()<sp/>-<sp/>The<sp/>implicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_duplicate_z()<sp/>-<sp/>The<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="vector_8h_1a28458b3a0c0444009b78fe53a4d42ebc" kindref="member">vector_duplicate_z</ref>(<ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>source,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>__attribute__((__malloc__,<sp/>nonnull));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">///<sp/>@copydoc<sp/>vector_duplicate_z()</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight><highlight class="comment">//=<sp/>vector_t<sp/>vector_duplicate(vector_c<sp/>source)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="vector_8h_1a3bf16868a790b080aec82fa674991d38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_duplicate(source)<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/>vector_duplicate_z(source,<sp/>VECTOR_Z((source)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="access_8h" kindref="compound">vector/access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="comparison_8h" kindref="compound">vector/comparison.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="create_8h" kindref="compound">vector/create.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="debug_8h" kindref="compound">vector/debug.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="delete_8h" kindref="compound">vector/delete.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="insert_8h" kindref="compound">vector/insert.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="move_8h" kindref="compound">vector/move.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="remove_8h" kindref="compound">vector/remove.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="resize_8h" kindref="compound">vector/resize.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="search_8h" kindref="compound">vector/search.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shift_8h" kindref="compound">vector/shift.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sort_8h" kindref="compound">vector/sort.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector.h"/>
  </compounddef>
</doxygen>
