<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="header_2vector_2access_8c" kind="file" language="C++">
    <compoundname>access.c</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="access_8h" local="yes">access.h</includes>
    <includedby refid="access_8h" local="yes">header/vector/access.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>header/vector/access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdalign.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="1">
        <label>header/vector/access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>header/vector/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>header/vector/search.c</label>
        <link refid="header_2vector_2search_8c"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>header/vector/search.h</label>
        <link refid="search_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>header/vector/remove.c</label>
        <link refid="header_2vector_2remove_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>header/vector/remove.h</label>
        <link refid="remove_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>header/vector/insert.c</label>
        <link refid="header_2vector_2insert_8c"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>header/vector/insert.h</label>
        <link refid="insert_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>header/vector/shift.c</label>
        <link refid="header_2vector_2shift_8c"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>header/vector/shift.h</label>
        <link refid="shift_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>header/vector/move.c</label>
        <link refid="header_2vector_2move_8c"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>header/vector/move.h</label>
        <link refid="move_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>header/vector/comparison.c</label>
        <link refid="header_2vector_2comparison_8c"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>header/vector/comparison.h</label>
        <link refid="comparison_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>header/vector/debug.c</label>
        <link refid="header_2vector_2debug_8c"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>header/vector/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="header_2vector_2access_8c_1a69b60a9dcdb15a21bc3acc563c59fa0a" prot="public" static="no">
        <name>VECTOR_ACCESS_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.c" line="4" column="9" bodyfile="header/vector/access.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="header_2vector_2access_8c_1a424115d4c612e3e8070e31e88158ba58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_index</definition>
        <argsstring>(vector_c vector, const void *elmt, size_t z)</argsstring>
        <name>vector_index</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Return the index of the element at <emphasis>elmt</emphasis> in the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Though this operation doesn&apos;t have the <computeroutput>_z</computeroutput> suffix, it <bold>is</bold> a part of the explicit interface and takes the element size of the <emphasis>vector</emphasis> as <emphasis>z</emphasis>. This operation is redundant if the element type of the <emphasis>vector</emphasis> is known at compile time as it&apos;s identical to <computeroutput>elmt - vector</computeroutput>.</para>
</simplesect>
This doesn&apos;t inspect the data at <emphasis>elmt</emphasis> or the elements in the <emphasis>vector</emphasis>; <emphasis>elmt</emphasis> must already be a pointer to an element in the <emphasis>vector</emphasis>.</para>
<para>This is the inverse of <ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at()</ref> such that: <programlisting filename=".c"><codeline><highlight class="normal"><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(elmt))<sp/>==<sp/>elmt</highlight></codeline>
<codeline><highlight class="normal"><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(vector,<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(i))<sp/>==<sp/>i</highlight></codeline>
</programlisting></para>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> or isn&apos;t a pointer to an element in the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a pointer to an offset in an element in the <emphasis>vector</emphasis> then the behavior is undefined.</para>
<para><simplesect kind="see"><para><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at()</ref> - the inverse operation to get a pointer to an element in a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.c" line="16" column="15" bodyfile="header/vector/access.c" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="header_2vector_2access_8c_1a19da575edf003c344ce9fa183f3a2eb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_get</definition>
        <argsstring>(vector_c vector, size_t i, void *elmt, size_t z)</argsstring>
        <name>vector_get</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Copy the element at index <emphasis>i</emphasis> in the <emphasis>vector</emphasis> into <emphasis>elmt</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Though this operation doesn&apos;t have the <computeroutput>_z</computeroutput> suffix, it <bold>is</bold> a part of the explicit interface and takes the element size of the <emphasis>vector</emphasis> as <emphasis>z</emphasis>. This operation is redundant if the element type of the <emphasis>vector</emphasis> is known at compile time as it&apos;s identical to <computeroutput>*elmt = vector[i]</computeroutput>.</para>
</simplesect>
If <emphasis>i</emphasis> isn&apos;t an index in the <emphasis>vector</emphasis> or <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the element in the <emphasis>vector</emphasis> to copy from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to copy the element to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="access_8h_1ad8e87d0c382b03ae3f8c5f9658a52ed0" kindref="member">vector_set()</ref> - the inverse operation to copy data into a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.c" line="21" column="13" bodyfile="header/vector/access.c" bodystart="21" bodyend="27"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <referencedby refid="header_2vector_2shift_8c_1a2328c81eefb3798ffc7c591f22ffe590" compoundref="header_2vector_2shift_8c" startline="16" endline="20">vector_pull_z</referencedby>
        <referencedby refid="header_2vector_2shift_8c_1ac03c1ef96fee473e9f9b858cc64293dc" compoundref="header_2vector_2shift_8c" startline="22" endline="26">vector_shift_z</referencedby>
      </memberdef>
      <memberdef kind="function" id="header_2vector_2access_8c_1ad8e87d0c382b03ae3f8c5f9658a52ed0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_set</definition>
        <argsstring>(vector_t vector, size_t i, const void *elmt, size_t z)</argsstring>
        <name>vector_set</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Copy the object at <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Though this operation doesn&apos;t have the <computeroutput>_z</computeroutput> suffix, it <bold>is</bold> a part of the explicit interface and takes the element size of the <emphasis>vector</emphasis> as <emphasis>z</emphasis>. This operation is redundant if the element type of the <emphasis>vector</emphasis> is known at compile time as it&apos;s identical to <computeroutput>vector[i] = *elmt</computeroutput>.</para>
</simplesect>
If <emphasis>i</emphasis> isn&apos;t an index in the <emphasis>vector</emphasis>, <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput>, or the type of the object at <emphasis>elmt</emphasis> is incompatible with the element type of the vector, then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the element in the <emphasis>vector</emphasis> to copy to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to copy the element from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" kindref="member">vector_get()</ref> - the inverse operation to copy data from a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.c" line="29" column="13" bodyfile="header/vector/access.c" bodystart="29" bodyend="35"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/access.c</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_ACCESS_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_ACCESS_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="access_8h" kindref="compound">access.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="header_2vector_2access_8c_1a424115d4c612e3e8070e31e88158ba58" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="header_2vector_2access_8c_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(<ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>PTRDIFF_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>elmt<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>vector)<sp/>/<sp/>z;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="header_2vector_2access_8c_1a19da575edf003c344ce9fa183f3a2eb2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="header_2vector_2access_8c_1a19da575edf003c344ce9fa183f3a2eb2" kindref="member">vector_get</ref>(<ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>comparison<sp/>is<sp/>well<sp/>defined<sp/>regardless<sp/>of<sp/>whether<sp/>elmt<sp/>is<sp/>an<sp/>object<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elmt<sp/>==<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/>i,<sp/>z))</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>memcpy(elmt,<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/>i,<sp/>z),<sp/>z);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="header_2vector_2access_8c_1ad8e87d0c382b03ae3f8c5f9658a52ed0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="header_2vector_2access_8c_1ad8e87d0c382b03ae3f8c5f9658a52ed0" kindref="member">vector_set</ref>(<ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>comparison<sp/>is<sp/>well<sp/>defined<sp/>regardless<sp/>of<sp/>whether<sp/>elmt<sp/>is<sp/>an<sp/>object<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elmt<sp/>==<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/>i,<sp/>z))</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>memcpy(<ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/>i,<sp/>z),<sp/>elmt,<sp/>z);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_ACCESS_C<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/access.c"/>
  </compounddef>
</doxygen>
