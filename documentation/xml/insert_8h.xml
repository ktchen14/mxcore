<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="insert_8h" kind="file" language="C++">
    <compoundname>insert.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="header_2vector_2insert_8c" local="yes">insert.c</includes>
    <includedby refid="vector_8h" local="yes">header/vector.h</includedby>
    <includedby refid="header_2vector_2insert_8c" local="yes">header/vector/insert.c</includedby>
    <incdepgraph>
      <node id="10">
        <label>access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdalign.h</label>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>errno.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>insert.c</label>
        <link refid="header_2vector_2insert_8c"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/insert.h</label>
        <link refid="insert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>resize.c</label>
        <link refid="header_2vector_2resize_8c"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>resize.h</label>
        <link refid="resize_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="3">
        <label>header/vector/insert.c</label>
        <link refid="header_2vector_2insert_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/insert.h</label>
        <link refid="insert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="insert_8h_1aa374654eeb6260651eeefaf41672088d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_insert</definition>
        <argsstring>(restrict vector_t vector, size_t i, const void *restrict elmt)</argsstring>
        <name>vector_insert</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <briefdescription>
<para>Insert the data at <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The index of the inserted element will be <emphasis>i</emphasis>. If <emphasis>i</emphasis> is the length of the <emphasis>vector</emphasis> then this will append the element to the <emphasis>vector</emphasis>. If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted element will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1a0f974d0998a52475443461258ac1ebce" kindref="member">vector_ensure()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its length then the behavior is undefined. If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the <emphasis>vector</emphasis> to insert the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the element to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1a99838caa28553e7237ba9e0693b0e790" kindref="member">vector_insert_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="39" column="17" bodyfile="header/vector/insert.h" bodystart="39" bodyend="39"/>
        <references refid="insert_8h_1a99838caa28553e7237ba9e0693b0e790" compoundref="header_2vector_2insert_8c" startline="19" endline="25">vector_insert_z</references>
      </memberdef>
      <memberdef kind="function" id="insert_8h_1a99838caa28553e7237ba9e0693b0e790" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_insert_z</definition>
        <argsstring>(restrict vector_t vector, size_t i, const void *restrict elmt, size_t z)</argsstring>
        <name>vector_insert_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Insert the data at <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The index of the inserted element will be <emphasis>i</emphasis>. If <emphasis>i</emphasis> is the length of the <emphasis>vector</emphasis> then this will append the element to the <emphasis>vector</emphasis>. If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted element will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its length then the behavior is undefined. If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the <emphasis>vector</emphasis> to insert the element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the element to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1aa374654eeb6260651eeefaf41672088d" kindref="member">vector_insert()</ref> - the implicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="66" column="17" bodyfile="header/vector/insert.c" bodystart="19" bodyend="25" declfile="header/vector/insert.h" declline="66" declcolumn="17"/>
        <references refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</references>
        <referencedby refid="insert_8h_1aa374654eeb6260651eeefaf41672088d" compoundref="insert_8h" startline="39" endline="39">vector_insert</referencedby>
      </memberdef>
      <memberdef kind="function" id="insert_8h_1a29b1b69bb9f2d9a114be35ea69af770a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_inject</definition>
        <argsstring>(restrict vector_t vector, size_t i, const void *restrict elmt, size_t n)</argsstring>
        <name>vector_inject</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Insert <emphasis>n</emphasis> elements from <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> starting at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The index of the first inserted element will be <emphasis>i</emphasis>. If <emphasis>i</emphasis> is the length of the <emphasis>vector</emphasis> then this will append the elements to the <emphasis>vector</emphasis>. If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted elements will be uninitialized. This is more efficient than calling <ref refid="insert_8h_1aa374654eeb6260651eeefaf41672088d" kindref="member">vector_insert()</ref> <emphasis>n</emphasis> times as the elements after <computeroutput>i + n</computeroutput> will be shifted only once.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1a0f974d0998a52475443461258ac1ebce" kindref="member">vector_ensure()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its length then the behavior is undefined. If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the <emphasis>vector</emphasis> to insert the elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the elements to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to insert from <emphasis>elmt</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1aba8d8fd225d02701f9803ce61989290e" kindref="member">vector_inject_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="103" column="17" bodyfile="header/vector/insert.h" bodystart="103" bodyend="103"/>
        <references refid="insert_8h_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</references>
      </memberdef>
      <memberdef kind="function" id="insert_8h_1aba8d8fd225d02701f9803ce61989290e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_inject_z</definition>
        <argsstring>(restrict vector_t vector, size_t i, const void *restrict elmt, size_t n, size_t z)</argsstring>
        <name>vector_inject_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Insert <emphasis>n</emphasis> elements from <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> starting at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The index of the first inserted element will be <emphasis>i</emphasis>. If <emphasis>i</emphasis> is the length of the <emphasis>vector</emphasis> then this will append the elements to the <emphasis>vector</emphasis>. If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted elements will be uninitialized. This is more efficient than calling <ref refid="insert_8h_1a99838caa28553e7237ba9e0693b0e790" kindref="member">vector_insert_z()</ref> <emphasis>n</emphasis> times as the elements after <computeroutput>i + n</computeroutput> will be shifted only once.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its length then the behavior is undefined. If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the <emphasis>vector</emphasis> to insert the elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the elements to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to insert from <emphasis>elmt</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1a29b1b69bb9f2d9a114be35ea69af770a" kindref="member">vector_inject()</ref> - the implicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="134" column="17" bodyfile="header/vector/insert.c" bodystart="27" bodyend="54" declfile="header/vector/insert.h" declline="134" declcolumn="17"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <references refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" compoundref="header_2vector_2resize_8c" startline="43" endline="60">vector_ensure_z</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="header_2vector_2insert_8c_1a52006f26b6f5a04e2961b3dc667b90a3" compoundref="header_2vector_2insert_8c" startline="56" endline="61">vector_append_z</referencedby>
        <referencedby refid="header_2vector_2insert_8c_1af3a00f1cf9b7d97899239f6d22e8bf51" compoundref="header_2vector_2insert_8c" startline="63" endline="69">vector_extend_z</referencedby>
        <referencedby refid="insert_8h_1a29b1b69bb9f2d9a114be35ea69af770a" compoundref="insert_8h" startline="103" endline="103">vector_inject</referencedby>
        <referencedby refid="header_2vector_2insert_8c_1a99838caa28553e7237ba9e0693b0e790" compoundref="header_2vector_2insert_8c" startline="19" endline="25">vector_insert_z</referencedby>
      </memberdef>
      <memberdef kind="function" id="insert_8h_1a10329d51d7a29d4ebbffefd425986b44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_append</definition>
        <argsstring>(restrict vector_t vector, const void *restrict elmt)</argsstring>
        <name>vector_append</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <briefdescription>
<para>Insert the data at <emphasis>elmt</emphasis> as the last element in the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted element will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1a0f974d0998a52475443461258ac1ebce" kindref="member">vector_ensure()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the element to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1a52006f26b6f5a04e2961b3dc667b90a3" kindref="member">vector_append_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="164" column="17" bodyfile="header/vector/insert.h" bodystart="164" bodyend="164"/>
        <references refid="insert_8h_1a52006f26b6f5a04e2961b3dc667b90a3" compoundref="header_2vector_2insert_8c" startline="56" endline="61">vector_append_z</references>
      </memberdef>
      <memberdef kind="function" id="insert_8h_1a52006f26b6f5a04e2961b3dc667b90a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_append_z</definition>
        <argsstring>(restrict vector_t vector, const void *restrict elmt, size_t z)</argsstring>
        <name>vector_append_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Insert the data at <emphasis>elmt</emphasis> as the last element in the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted element will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the element to append </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1a52006f26b6f5a04e2961b3dc667b90a3" kindref="member">vector_append_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="187" column="17" bodyfile="header/vector/insert.c" bodystart="56" bodyend="61" declfile="header/vector/insert.h" declline="187" declcolumn="17"/>
        <references refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="insert_8h_1a10329d51d7a29d4ebbffefd425986b44" compoundref="insert_8h" startline="164" endline="164">vector_append</referencedby>
      </memberdef>
      <memberdef kind="function" id="insert_8h_1a4fe00acd3790816c0218eef743861e8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_extend</definition>
        <argsstring>(restrict vector_t vector, const void *restrict elmt, size_t n)</argsstring>
        <name>vector_extend</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>n</emphasis> elements from <emphasis>elmt</emphasis> to the tail of the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted elements will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1a0f974d0998a52475443461258ac1ebce" kindref="member">vector_ensure()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the elements to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to insert from <emphasis>elmt</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1af3a00f1cf9b7d97899239f6d22e8bf51" kindref="member">vector_extend_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="216" column="17" bodyfile="header/vector/insert.h" bodystart="216" bodyend="216"/>
        <references refid="insert_8h_1af3a00f1cf9b7d97899239f6d22e8bf51" compoundref="header_2vector_2insert_8c" startline="63" endline="69">vector_extend_z</references>
      </memberdef>
      <memberdef kind="function" id="insert_8h_1af3a00f1cf9b7d97899239f6d22e8bf51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
        <definition>vector_t vector_extend_z</definition>
        <argsstring>(restrict vector_t vector, const void *restrict elmt, size_t n, size_t z)</argsstring>
        <name>vector_extend_z</name>
        <param>
          <type>restrict <ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *restrict</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>n</emphasis> elements from <emphasis>elmt</emphasis> to the tail of the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the inserted elements will be uninitialized.</para>
<para>If the resultant length of the <emphasis>vector</emphasis> would overflow a <computeroutput>size_t</computeroutput> then this will set <computeroutput>errno</computeroutput> to <computeroutput>ENOMEM</computeroutput> and return <computeroutput>NULL</computeroutput>. Otherwise this will call <ref refid="resize_8h_1aca602cd1c36467c4ab8a8a2aa480a4e2" kindref="member">vector_ensure_z()</ref>. If that fails then the <emphasis>vector</emphasis> will be unmodified and the value of <computeroutput>errno</computeroutput> set by realloc() will be retained.</para>
<para>If <emphasis>elmt</emphasis> isn&apos;t <computeroutput>NULL</computeroutput> and its type is incompatible with the element type of the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a location in the <emphasis>vector</emphasis> itself then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the elements to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to insert from <emphasis>elmt</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the resultant vector on success; otherwise <computeroutput>NULL</computeroutput> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="insert_8h_1af3a00f1cf9b7d97899239f6d22e8bf51" kindref="member">vector_extend_z()</ref> - the explicit interface analogue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/insert.h" line="240" column="17" bodyfile="header/vector/insert.c" bodystart="63" bodyend="69" declfile="header/vector/insert.h" declline="240" declcolumn="17"/>
        <references refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="insert_8h_1a4fe00acd3790816c0218eef743861e8d" compoundref="insert_8h" startline="216" endline="216">vector_extend</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/insert.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_INSERT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_INSERT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Insert<sp/>the<sp/>data<sp/>at<sp/>@a<sp/>elmt<sp/>into<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>index<sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>The<sp/>index<sp/>of<sp/>the<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>@a<sp/>i.<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@a<sp/>vector<sp/>then<sp/>this<sp/>will<sp/>append<sp/>the<sp/>element<sp/>to<sp/>the<sp/>@a<sp/>vector.<sp/>If<sp/>@a<sp/>elmt<sp/>is</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>uninitialized.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>vector_ensure().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>location<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>insert<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>element<sp/>to<sp/>insert</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_insert_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>inline<sp/>vector_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>vector_insert(restrict<sp/>vector_t<sp/>vector,<sp/>size_t<sp/>i,<sp/>const<sp/>void<sp/>*restrict<sp/>elmt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="insert_8h_1aa374654eeb6260651eeefaf41672088d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_insert(v,<sp/>...)<sp/>vector_insert_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Insert<sp/>the<sp/>data<sp/>at<sp/>@a<sp/>elmt<sp/>into<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>index<sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>The<sp/>index<sp/>of<sp/>the<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>@a<sp/>i.<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@a<sp/>vector<sp/>then<sp/>this<sp/>will<sp/>append<sp/>the<sp/>element<sp/>to<sp/>the<sp/>@a<sp/>vector.<sp/>If<sp/>@a<sp/>elmt<sp/>is</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>uninitialized.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>vector_ensure_z().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>location<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>insert<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>element<sp/>to<sp/>insert</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_insert()<sp/>-<sp/>the<sp/>implicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="insert_8h_1a99838caa28553e7237ba9e0693b0e790" kindref="member">vector_insert_z</ref>(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1),<sp/>warn_unused_result));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Insert<sp/>@a<sp/>n<sp/>elements<sp/>from<sp/>@a<sp/>elmt<sp/>into<sp/>the<sp/>@a<sp/>vector<sp/>starting<sp/>at<sp/>index</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>The<sp/>index<sp/>of<sp/>the<sp/>first<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>@a<sp/>i.<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>this<sp/>will<sp/>append<sp/>the<sp/>elements<sp/>to<sp/>the<sp/>@a<sp/>vector.<sp/>If</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>elements<sp/>will<sp/>be<sp/>uninitialized.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>more<sp/>efficient<sp/>than<sp/>calling<sp/>vector_insert()<sp/>@a<sp/>n<sp/>times<sp/>as<sp/>the<sp/>elements<sp/>after</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>&lt;code&gt;i<sp/>+<sp/>n&lt;/code&gt;<sp/>will<sp/>be<sp/>shifted<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>vector_ensure().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>location<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>insert<sp/>the<sp/>elements</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>elements<sp/>to<sp/>insert</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>insert<sp/>from<sp/>@a<sp/>elmt</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_inject_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>inline<sp/>vector_t<sp/>vector_inject(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//=<sp/><sp/><sp/>restrict<sp/>vector_t<sp/>vector,<sp/>size_t<sp/>i,<sp/>const<sp/>void<sp/>*restrict<sp/>elmt,<sp/>size_t<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="insert_8h_1a29b1b69bb9f2d9a114be35ea69af770a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_inject(v,<sp/>...)<sp/>vector_inject_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Insert<sp/>@a<sp/>n<sp/>elements<sp/>from<sp/>@a<sp/>elmt<sp/>into<sp/>the<sp/>@a<sp/>vector<sp/>starting<sp/>at<sp/>index</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>The<sp/>index<sp/>of<sp/>the<sp/>first<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>@a<sp/>i.<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>this<sp/>will<sp/>append<sp/>the<sp/>elements<sp/>to<sp/>the<sp/>@a<sp/>vector.<sp/>If</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>elements<sp/>will<sp/>be<sp/>uninitialized.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>more<sp/>efficient<sp/>than<sp/>calling<sp/>vector_insert_z()<sp/>@a<sp/>n<sp/>times<sp/>as<sp/>the<sp/>elements</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>after<sp/>&lt;code&gt;i<sp/>+<sp/>n&lt;/code&gt;<sp/>will<sp/>be<sp/>shifted<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>vector_ensure_z().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>location<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>insert<sp/>the<sp/>elements</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>elements<sp/>to<sp/>insert</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>insert<sp/>from<sp/>@a<sp/>elmt</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_inject()<sp/>-<sp/>the<sp/>implicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="insert_8h_1aba8d8fd225d02701f9803ce61989290e" kindref="member">vector_inject_z</ref>(</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1),<sp/>warn_unused_result));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Insert<sp/>the<sp/>data<sp/>at<sp/>@a<sp/>elmt<sp/>as<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>uninitialized.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>vector_ensure().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the<sp/>element<sp/>type</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a<sp/>location<sp/>in</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>element<sp/>to<sp/>append</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_append_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>inline<sp/>vector_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>vector_append(restrict<sp/>vector_t<sp/>vector,<sp/>const<sp/>void<sp/>*restrict<sp/>elmt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="insert_8h_1a10329d51d7a29d4ebbffefd425986b44" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_append(v,<sp/>...)<sp/>vector_append_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Insert<sp/>the<sp/>data<sp/>at<sp/>@a<sp/>elmt<sp/>as<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>element<sp/>will<sp/>be<sp/>uninitialized.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>vector_ensure_z().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the<sp/>element<sp/>type</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a<sp/>location<sp/>in</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>element<sp/>to<sp/>append</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_append_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="insert_8h_1a52006f26b6f5a04e2961b3dc667b90a3" kindref="member">vector_append_z</ref>(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1),<sp/>warn_unused_result));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Append<sp/>@a<sp/>n<sp/>elements<sp/>from<sp/>@a<sp/>elmt<sp/>to<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>elements<sp/>will<sp/>be<sp/>uninitialized.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>vector_ensure().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the<sp/>element<sp/>type</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a<sp/>location<sp/>in</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>elements<sp/>to<sp/>insert</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>insert<sp/>from<sp/>@a<sp/>elmt</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_extend_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>inline<sp/>vector_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>vector_extend(restrict<sp/>vector_t<sp/>vector,<sp/>const<sp/>void<sp/>*restrict<sp/>elmt,<sp/>size_t<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="insert_8h_1a4fe00acd3790816c0218eef743861e8d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_extend(v,<sp/>...)<sp/>vector_extend_z((v),<sp/>__VA_ARGS__,<sp/>VECTOR_Z((v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Append<sp/>@a<sp/>n<sp/>elements<sp/>from<sp/>@a<sp/>elmt<sp/>to<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>then<sp/>the<sp/>inserted<sp/>elements<sp/>will<sp/>be<sp/>uninitialized.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>resultant<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>would<sp/>overflow<sp/>a<sp/>@c<sp/>size_t<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>will<sp/>set<sp/>@c<sp/>errno<sp/>to<sp/>@c<sp/>ENOMEM<sp/>and<sp/>return<sp/>@c<sp/>NULL.<sp/>Otherwise<sp/>this<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>vector_ensure_z().<sp/>If<sp/>that<sp/>fails<sp/>then<sp/>the<sp/>@a<sp/>vector<sp/>will<sp/>be<sp/>unmodified<sp/>and</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>the<sp/>value<sp/>of<sp/>@c<sp/>errno<sp/>set<sp/>by<sp/>realloc()<sp/>will<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>isn&apos;t<sp/>@c<sp/>NULL<sp/>and<sp/>its<sp/>type<sp/>is<sp/>incompatible<sp/>with<sp/>the<sp/>element<sp/>type</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a<sp/>location<sp/>in</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>the<sp/>@a<sp/>vector<sp/>itself<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>of<sp/>the<sp/>elements<sp/>to<sp/>insert</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>insert<sp/>from<sp/>@a<sp/>elmt</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@return<sp/>the<sp/>resultant<sp/>vector<sp/>on<sp/>success;<sp/>otherwise<sp/>@c<sp/>NULL</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_extend_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/><ref refid="insert_8h_1af3a00f1cf9b7d97899239f6d22e8bf51" kindref="member">vector_extend_z</ref>(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>restrict<sp/><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*restrict<sp/>elmt,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>__attribute__((nonnull(1),<sp/>warn_unused_result));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_INSERT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="source_2vector_2insert_8c" kindref="compound">insert.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/insert.h"/>
  </compounddef>
</doxygen>
