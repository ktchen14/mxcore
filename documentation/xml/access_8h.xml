<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="access_8h" kind="file" language="C++">
    <compoundname>access.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="header_2vector_2access_8c" local="yes">access.c</includes>
    <includedby refid="vector_8h" local="yes">header/vector.h</includedby>
    <includedby refid="header_2vector_2access_8c" local="yes">header/vector/access.c</includedby>
    <includedby refid="header_2vector_2comparison_8c" local="yes">header/vector/comparison.c</includedby>
    <includedby refid="header_2vector_2debug_8c" local="yes">header/vector/debug.c</includedby>
    <includedby refid="header_2vector_2insert_8c" local="yes">header/vector/insert.c</includedby>
    <includedby refid="header_2vector_2move_8c" local="yes">header/vector/move.c</includedby>
    <includedby refid="header_2vector_2remove_8c" local="yes">header/vector/remove.c</includedby>
    <includedby refid="header_2vector_2search_8c" local="yes">header/vector/search.c</includedby>
    <includedby refid="header_2vector_2shift_8c" local="yes">header/vector/shift.c</includedby>
    <incdepgraph>
      <node id="6">
        <label>access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdalign.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>common.c</label>
        <link refid="header_2vector_2common_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>header/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="3">
        <label>header/vector/access.c</label>
        <link refid="header_2vector_2access_8c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>header/vector/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>header/vector/search.c</label>
        <link refid="header_2vector_2search_8c"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>header/vector/search.h</label>
        <link refid="search_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>header/vector/remove.c</label>
        <link refid="header_2vector_2remove_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>header/vector/remove.h</label>
        <link refid="remove_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>header/vector/insert.c</label>
        <link refid="header_2vector_2insert_8c"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>header/vector/insert.h</label>
        <link refid="insert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>header/vector/shift.c</label>
        <link refid="header_2vector_2shift_8c"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>header/vector/shift.h</label>
        <link refid="shift_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>header/vector/move.c</label>
        <link refid="header_2vector_2move_8c"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>header/vector/move.h</label>
        <link refid="move_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>header/vector/comparison.c</label>
        <link refid="header_2vector_2comparison_8c"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>header/vector/comparison.h</label>
        <link refid="comparison_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>header/vector/debug.c</label>
        <link refid="header_2vector_2debug_8c"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>header/vector/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* vector_at</definition>
        <argsstring>(vector_t vector, size_t i, size_t z)</argsstring>
        <name>vector_at</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the element in the <emphasis>vector</emphasis> at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Though this operation doesn&apos;t have the <computeroutput>_z</computeroutput> suffix, it <bold>is</bold> a part of the explicit interface and takes the element size of the <emphasis>vector</emphasis> as <emphasis>z</emphasis>. This operation is redundant if the element type of the <emphasis>vector</emphasis> is known at compile time as it&apos;s identical to <computeroutput>vector + i</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>This operation is implemented as a macro but documented as a function to clarify its intended usage.</para>
</simplesect>
If <emphasis>i</emphasis> is the length of the <emphasis>vector</emphasis> then this will return a pointer to just past the last element of the <emphasis>vector</emphasis>.</para>
<para>This operation is <computeroutput>const</computeroutput> qualified on the <emphasis>vector</emphasis>. That is if the element type of the <emphasis>vector</emphasis> is <computeroutput>const</computeroutput> qualified (<emphasis>vector</emphasis> is compatible with a <ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref>), this will return a <computeroutput>const void *</computeroutput>. Otherwise this will return a <computeroutput>void *</computeroutput>.</para>
<para>This is the inverse of <ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index()</ref> such that: <programlisting filename=".c"><codeline><highlight class="normal"><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(vector,<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(i))<sp/>==<sp/>i</highlight></codeline>
<codeline><highlight class="normal"><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(elmt))<sp/>==<sp/>elmt</highlight></codeline>
</programlisting></para>
<para>If <emphasis>i</emphasis> is neither an index in the <emphasis>vector</emphasis> or its length then the behavior is undefined.</para>
<para><simplesect kind="see"><para><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index()</ref> - the inverse operation to get the index of an element in a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.h" line="45" column="6" bodyfile="header/vector/access.h" bodystart="45" bodyend="45"/>
        <referencedby refid="header_2vector_2debug_8c_1a32f99733e4c0b0fa96eedf1c15b8b249" compoundref="header_2vector_2debug_8c" startline="15" endline="26">vector_debug_z</referencedby>
        <referencedby refid="group__vector__module_1ga93613d2838fd60a1f478f145a7d766db" compoundref="header_2vector_2comparison_8c" startline="31" endline="52">vector_eq_with_z</referencedby>
        <referencedby refid="header_2vector_2remove_8c_1a337078e9e3a9d47d5cec16808fe9afcc" compoundref="header_2vector_2remove_8c" startline="22" endline="44">vector_excise_z</referencedby>
        <referencedby refid="group__vector__module_1ga49accb1745baaa317db375e67e62eb38" compoundref="header_2vector_2search_8c" startline="40" endline="51">vector_find_last_z</referencedby>
        <referencedby refid="group__vector__module_1gac688a8f438657eb30088adccc3a14bb6" compoundref="header_2vector_2search_8c" startline="27" endline="38">vector_find_next_z</referencedby>
        <referencedby refid="header_2vector_2access_8c_1a19da575edf003c344ce9fa183f3a2eb2" compoundref="header_2vector_2access_8c" startline="21" endline="27">vector_get</referencedby>
        <referencedby refid="header_2vector_2insert_8c_1aba8d8fd225d02701f9803ce61989290e" compoundref="header_2vector_2insert_8c" startline="27" endline="54">vector_inject_z</referencedby>
        <referencedby refid="header_2vector_2access_8c_1ad8e87d0c382b03ae3f8c5f9658a52ed0" compoundref="header_2vector_2access_8c" startline="29" endline="35">vector_set</referencedby>
        <referencedby refid="header_2vector_2move_8c_1ad66c0d75de6d68e696f0299805ec2747" compoundref="header_2vector_2move_8c" startline="31" endline="41">vector_swap_z</referencedby>
        <referencedby refid="access_8h_1a4c6c341fef93a7889eed821ef6189d83" compoundref="access_8h" startline="98" endline="98">vector_tail_z</referencedby>
      </memberdef>
      <memberdef kind="function" id="access_8h_1aa02d9deea603893add4f88ddbc48a991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* vector_tail</definition>
        <argsstring>(vector_t vector)</argsstring>
        <name>vector_tail</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the last element in the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This operation is implemented as a macro but documented as a function to clarify its intended usage.</para>
</simplesect>
This operation is <computeroutput>const</computeroutput> qualified on the <emphasis>vector</emphasis>. That is if the element type of the <emphasis>vector</emphasis> is <computeroutput>const</computeroutput> qualified (<emphasis>vector</emphasis> is compatible with a <ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref>) then this will return a <computeroutput>const void *</computeroutput>. Otherwise this will return a <computeroutput>void *</computeroutput>.</para>
<para>If no last element is in the <emphasis>vector</emphasis> (the <emphasis>vector&apos;s</emphasis> <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> is zero) then the behavior is undefined.</para>
<para><simplesect kind="see"><para><ref refid="access_8h_1a4c6c341fef93a7889eed821ef6189d83" kindref="member">vector_tail_z()</ref> - the explicit interface analogue</para>
</simplesect>
<simplesect kind="remark"><para>No <computeroutput>vector_head()</computeroutput> or <computeroutput>vector_head_z()</computeroutput> is available; a pointer to the first element in some vector is just <computeroutput>vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.h" line="76" column="6" bodyfile="header/vector/access.h" bodystart="76" bodyend="76"/>
        <references refid="access_8h_1a4c6c341fef93a7889eed821ef6189d83" compoundref="access_8h" startline="98" endline="98">vector_tail_z</references>
      </memberdef>
      <memberdef kind="function" id="access_8h_1a4c6c341fef93a7889eed821ef6189d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* vector_tail_z</definition>
        <argsstring>(vector_t vector, size_t z)</argsstring>
        <name>vector_tail_z</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the last element in the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This operation is implemented as a macro but documented as a function to clarify its intended usage.</para>
</simplesect>
This operation is <computeroutput>const</computeroutput> qualified on the <emphasis>vector</emphasis>. That is if the element type of the <emphasis>vector</emphasis> is <computeroutput>const</computeroutput> qualified (<emphasis>vector</emphasis> is compatible with a <ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref>) then this will return a <computeroutput>const void *</computeroutput>. Otherwise this will return a <computeroutput>void *</computeroutput>.</para>
<para>If no last element is in the <emphasis>vector</emphasis> (the <emphasis>vector&apos;s</emphasis> <ref refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" kindref="member">length</ref> is zero) then the behavior is undefined.</para>
<para><simplesect kind="see"><para><ref refid="access_8h_1aa02d9deea603893add4f88ddbc48a991" kindref="member">vector_tail()</ref> - the implicit interface analogue</para>
</simplesect>
<simplesect kind="remark"><para>No <computeroutput>vector_head()</computeroutput> or <computeroutput>vector_head_z()</computeroutput> is available; a pointer to the first element in some vector is just <computeroutput>vector</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.h" line="98" column="6" bodyfile="header/vector/access.h" bodystart="98" bodyend="98"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <references refid="common_8h_1a587cb79957c36c5a87216ec27ab5fdbb" compoundref="common_8h" startline="95" endline="97">vector_length</references>
        <referencedby refid="access_8h_1aa02d9deea603893add4f88ddbc48a991" compoundref="access_8h" startline="76" endline="76">vector_tail</referencedby>
      </memberdef>
      <memberdef kind="function" id="access_8h_1a424115d4c612e3e8070e31e88158ba58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vector_index</definition>
        <argsstring>(vector_c vector, const void *elmt, size_t z)</argsstring>
        <name>vector_index</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Return the index of the element at <emphasis>elmt</emphasis> in the <emphasis>vector</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Though this operation doesn&apos;t have the <computeroutput>_z</computeroutput> suffix, it <bold>is</bold> a part of the explicit interface and takes the element size of the <emphasis>vector</emphasis> as <emphasis>z</emphasis>. This operation is redundant if the element type of the <emphasis>vector</emphasis> is known at compile time as it&apos;s identical to <computeroutput>elmt - vector</computeroutput>.</para>
</simplesect>
This doesn&apos;t inspect the data at <emphasis>elmt</emphasis> or the elements in the <emphasis>vector</emphasis>; <emphasis>elmt</emphasis> must already be a pointer to an element in the <emphasis>vector</emphasis>.</para>
<para>This is the inverse of <ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at()</ref> such that: <programlisting filename=".c"><codeline><highlight class="normal"><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(vector,<sp/><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(elmt))<sp/>==<sp/>elmt</highlight></codeline>
<codeline><highlight class="normal"><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(vector,<sp/><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at</ref>(i))<sp/>==<sp/>i</highlight></codeline>
</programlisting></para>
<para>If <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> or isn&apos;t a pointer to an element in the <emphasis>vector</emphasis> then the behavior is undefined. If <emphasis>elmt</emphasis> is a pointer to an offset in an element in the <emphasis>vector</emphasis> then the behavior is undefined.</para>
<para><simplesect kind="see"><para><ref refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" kindref="member">vector_at()</ref> - the inverse operation to get a pointer to an element in a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.h" line="124" column="15" bodyfile="header/vector/access.c" bodystart="16" bodyend="19" declfile="header/vector/access.h" declline="124" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_get</definition>
        <argsstring>(vector_c vector, size_t i, void *elmt, size_t z)</argsstring>
        <name>vector_get</name>
        <param>
          <type><ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Copy the element at index <emphasis>i</emphasis> in the <emphasis>vector</emphasis> into <emphasis>elmt</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Though this operation doesn&apos;t have the <computeroutput>_z</computeroutput> suffix, it <bold>is</bold> a part of the explicit interface and takes the element size of the <emphasis>vector</emphasis> as <emphasis>z</emphasis>. This operation is redundant if the element type of the <emphasis>vector</emphasis> is known at compile time as it&apos;s identical to <computeroutput>*elmt = vector[i]</computeroutput>.</para>
</simplesect>
If <emphasis>i</emphasis> isn&apos;t an index in the <emphasis>vector</emphasis> or <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput> then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the element in the <emphasis>vector</emphasis> to copy from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to copy the element to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="access_8h_1ad8e87d0c382b03ae3f8c5f9658a52ed0" kindref="member">vector_set()</ref> - the inverse operation to copy data into a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.h" line="145" column="13" bodyfile="header/vector/access.c" bodystart="21" bodyend="27" declfile="header/vector/access.h" declline="145" declcolumn="13"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
        <referencedby refid="header_2vector_2shift_8c_1a2328c81eefb3798ffc7c591f22ffe590" compoundref="header_2vector_2shift_8c" startline="16" endline="20">vector_pull_z</referencedby>
        <referencedby refid="header_2vector_2shift_8c_1ac03c1ef96fee473e9f9b858cc64293dc" compoundref="header_2vector_2shift_8c" startline="22" endline="26">vector_shift_z</referencedby>
      </memberdef>
      <memberdef kind="function" id="access_8h_1ad8e87d0c382b03ae3f8c5f9658a52ed0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_set</definition>
        <argsstring>(vector_t vector, size_t i, const void *elmt, size_t z)</argsstring>
        <name>vector_set</name>
        <param>
          <type><ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref></type>
          <declname>vector</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>elmt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Copy the object at <emphasis>elmt</emphasis> into the <emphasis>vector</emphasis> at index <emphasis>i</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Though this operation doesn&apos;t have the <computeroutput>_z</computeroutput> suffix, it <bold>is</bold> a part of the explicit interface and takes the element size of the <emphasis>vector</emphasis> as <emphasis>z</emphasis>. This operation is redundant if the element type of the <emphasis>vector</emphasis> is known at compile time as it&apos;s identical to <computeroutput>vector[i] = *elmt</computeroutput>.</para>
</simplesect>
If <emphasis>i</emphasis> isn&apos;t an index in the <emphasis>vector</emphasis>, <emphasis>elmt</emphasis> is <computeroutput>NULL</computeroutput>, or the type of the object at <emphasis>elmt</emphasis> is incompatible with the element type of the vector, then the behavior is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the element in the <emphasis>vector</emphasis> to copy to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to copy the element from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the element size of the <emphasis>vector</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" kindref="member">vector_get()</ref> - the inverse operation to copy data from a vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="header/vector/access.h" line="167" column="13" bodyfile="header/vector/access.c" bodystart="29" bodyend="35" declfile="header/vector/access.h" declline="167" declcolumn="13"/>
        <references refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" compoundref="access_8h" startline="45" endline="45">vector_at</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">///<sp/>@file<sp/>header/vector/access.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_ACCESS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_ACCESS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>index<sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>@note<sp/>Though<sp/>this<sp/>operation<sp/>doesn&apos;t<sp/>have<sp/>the<sp/>@c<sp/>_z<sp/>suffix,<sp/>it<sp/>@b<sp/>is<sp/>a<sp/>part<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>the<sp/>explicit<sp/>interface<sp/>and<sp/>takes<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>as<sp/>@a<sp/>z.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>redundant<sp/>if<sp/>the<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>known<sp/>at</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>compile<sp/>time<sp/>as<sp/>it&apos;s<sp/>identical<sp/>to<sp/>&lt;code&gt;vector<sp/>+<sp/>i&lt;/code&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>operation<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>macro<sp/>but<sp/>documented<sp/>as<sp/>a<sp/>function</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>to<sp/>clarify<sp/>its<sp/>intended<sp/>usage.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>this<sp/>will<sp/>return<sp/>a<sp/>pointer<sp/>to</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>just<sp/>past<sp/>the<sp/>last<sp/>element<sp/>of<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>@c<sp/>const<sp/>qualified<sp/>on<sp/>the<sp/>@a<sp/>vector.<sp/>That<sp/>is<sp/>if<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>@c<sp/>const<sp/>qualified<sp/>(@a<sp/>vector<sp/>is<sp/>compatible<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>@ref<sp/>vector_c),<sp/>this<sp/>will<sp/>return<sp/>a<sp/>&lt;tt&gt;const<sp/>void<sp/>*&lt;/tt&gt;.<sp/>Otherwise<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>return<sp/>a<sp/>&lt;tt&gt;void<sp/>*&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>inverse<sp/>of<sp/>vector_index()<sp/>such<sp/>that:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@code{.c}</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/>vector_index(vector,<sp/>vector_at(i))<sp/>==<sp/>i</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/>vector_at(vector,<sp/>vector_index(elmt))<sp/>==<sp/>elmt</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>is<sp/>neither<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>its<sp/>length<sp/>then<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_index()<sp/>-<sp/>the<sp/>inverse<sp/>operation<sp/>to<sp/>get<sp/>the<sp/>index<sp/>of<sp/>an<sp/>element<sp/>in</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>void<sp/>*vector_at(vector_t<sp/>vector,<sp/>size_t<sp/>i,<sp/>size_t<sp/>z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="access_8h_1a3d34a65010e7b668473c10be6f6f72e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_at(vector,<sp/>i,<sp/>z)<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Warn<sp/>or<sp/>fail<sp/>if<sp/>vector<sp/>isn&apos;t<sp/>a<sp/>pointer.<sp/>When<sp/>this<sp/>is<sp/>absent<sp/>if<sp/>vector<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>a<sp/>scalar<sp/>no<sp/>warning<sp/>is<sp/>issued<sp/>due<sp/>to<sp/>the<sp/>explicit<sp/>cast<sp/>to<sp/>char<sp/>*.<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>const<sp/>void<sp/>*__vector<sp/>=<sp/>(vector);<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/>_Pragma(&quot;GCC<sp/>diagnostic<sp/>push&quot;)<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/>_Pragma(&quot;GCC<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wcast-align\&quot;&quot;)<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/>_Pragma(&quot;GCC<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wcast-qual\&quot;&quot;)<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/>(__typeof__((vector)))<sp/>((const<sp/>char<sp/>*)<sp/>(__vector)<sp/>+<sp/>(i)<sp/>*<sp/>(z));<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/>_Pragma(&quot;GCC<sp/>diagnostic<sp/>pop&quot;)<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor">})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>operation<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>macro<sp/>but<sp/>documented<sp/>as<sp/>a<sp/>function</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>to<sp/>clarify<sp/>its<sp/>intended<sp/>usage.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>@c<sp/>const<sp/>qualified<sp/>on<sp/>the<sp/>@a<sp/>vector.<sp/>That<sp/>is<sp/>if<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>@c<sp/>const<sp/>qualified<sp/>(@a<sp/>vector<sp/>is<sp/>compatible<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@ref<sp/>vector_c)<sp/>then<sp/>this<sp/>will<sp/>return<sp/>a<sp/>&lt;tt&gt;const<sp/>void<sp/>*&lt;/tt&gt;.<sp/>Otherwise<sp/>this</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>will<sp/>return<sp/>a<sp/>&lt;tt&gt;void<sp/>*&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>last<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>(the<sp/>@a<sp/>vector&apos;s<sp/>@length<sp/>is<sp/>zero)<sp/>then</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_tail_z()<sp/>-<sp/>the<sp/>explicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@remark<sp/>No<sp/>&lt;code&gt;vector_head()&lt;/code&gt;<sp/>or<sp/>&lt;code&gt;vector_head_z()&lt;/code&gt;<sp/>is</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>available;<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>element<sp/>in<sp/>some<sp/>vector<sp/>is<sp/>just<sp/>@c<sp/>vector.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>void<sp/>*vector_tail(vector_t<sp/>vector)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="access_8h_1aa02d9deea603893add4f88ddbc48a991" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_tail(v)<sp/>vector_tail_z((v),<sp/>VECTOR_Z(v))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>operation<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>macro<sp/>but<sp/>documented<sp/>as<sp/>a<sp/>function</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>to<sp/>clarify<sp/>its<sp/>intended<sp/>usage.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>@c<sp/>const<sp/>qualified<sp/>on<sp/>the<sp/>@a<sp/>vector.<sp/>That<sp/>is<sp/>if<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>@c<sp/>const<sp/>qualified<sp/>(@a<sp/>vector<sp/>is<sp/>compatible<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>@ref<sp/>vector_c)<sp/>then<sp/>this<sp/>will<sp/>return<sp/>a<sp/>&lt;tt&gt;const<sp/>void<sp/>*&lt;/tt&gt;.<sp/>Otherwise<sp/>this</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>will<sp/>return<sp/>a<sp/>&lt;tt&gt;void<sp/>*&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>If<sp/>no<sp/>last<sp/>element<sp/>is<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>(the<sp/>@a<sp/>vector&apos;s<sp/>@length<sp/>is<sp/>zero)<sp/>then</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_tail()<sp/>-<sp/>the<sp/>implicit<sp/>interface<sp/>analogue</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@remark<sp/>No<sp/>&lt;code&gt;vector_head()&lt;/code&gt;<sp/>or<sp/>&lt;code&gt;vector_head_z()&lt;/code&gt;<sp/>is</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>available;<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>element<sp/>in<sp/>some<sp/>vector<sp/>is<sp/>just<sp/>@c<sp/>vector.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//=<sp/>void<sp/>*vector_tail_z(vector_t<sp/>vector,<sp/>size_t<sp/>z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="access_8h_1a4c6c341fef93a7889eed821ef6189d83" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_tail_z(v,<sp/>z)<sp/>vector_at((v),<sp/>vector_length((v))<sp/>-<sp/>1,<sp/>(z))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>at<sp/>@a<sp/>elmt<sp/>in<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@note<sp/>Though<sp/>this<sp/>operation<sp/>doesn&apos;t<sp/>have<sp/>the<sp/>@c<sp/>_z<sp/>suffix,<sp/>it<sp/>@b<sp/>is<sp/>a<sp/>part<sp/>of</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>the<sp/>explicit<sp/>interface<sp/>and<sp/>takes<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>as<sp/>@a<sp/>z.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>redundant<sp/>if<sp/>the<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>known<sp/>at</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>compile<sp/>time<sp/>as<sp/>it&apos;s<sp/>identical<sp/>to<sp/>&lt;code&gt;elmt<sp/>-<sp/>vector&lt;/code&gt;.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>This<sp/>doesn&apos;t<sp/>inspect<sp/>the<sp/>data<sp/>at<sp/>@a<sp/>elmt<sp/>or<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>@a<sp/>vector;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@a<sp/>elmt<sp/>must<sp/>already<sp/>be<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>inverse<sp/>of<sp/>vector_at()<sp/>such<sp/>that:</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@code{.c}</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/><sp/>vector_at(vector,<sp/>vector_index(elmt))<sp/>==<sp/>elmt</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/><sp/>vector_index(vector,<sp/>vector_at(i))<sp/>==<sp/>i</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>or<sp/>isn&apos;t<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>then</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>the<sp/>behavior<sp/>is<sp/>undefined.<sp/>If<sp/>@a<sp/>elmt<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>offset<sp/>in<sp/>an<sp/>element</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_at()<sp/>-<sp/>the<sp/>inverse<sp/>operation<sp/>to<sp/>get<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>element<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/>vector</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="access_8h_1a424115d4c612e3e8070e31e88158ba58" kindref="member">vector_index</ref>(<ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>__attribute__((nonnull,<sp/>pure));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Copy<sp/>the<sp/>element<sp/>at<sp/>index<sp/>@a<sp/>i<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>into<sp/>@a<sp/>elmt</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@note<sp/>Though<sp/>this<sp/>operation<sp/>doesn&apos;t<sp/>have<sp/>the<sp/>@c<sp/>_z<sp/>suffix,<sp/>it<sp/>@b<sp/>is<sp/>a<sp/>part<sp/>of</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>the<sp/>explicit<sp/>interface<sp/>and<sp/>takes<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>as<sp/>@a<sp/>z.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>redundant<sp/>if<sp/>the<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>known<sp/>at</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>compile<sp/>time<sp/>as<sp/>it&apos;s<sp/>identical<sp/>to<sp/>&lt;code&gt;*elmt<sp/>=<sp/>vector[i]&lt;/code&gt;.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>isn&apos;t<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>or<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>copy<sp/>from</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>to<sp/>copy<sp/>the<sp/>element<sp/>to</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_set()<sp/>-<sp/>the<sp/>inverse<sp/>operation<sp/>to<sp/>copy<sp/>data<sp/>into<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="access_8h_1a19da575edf003c344ce9fa183f3a2eb2" kindref="member">vector_get</ref>(<ref refid="common_8h_1ae2e5ca5c0f41f2b0bce39bf1b6631122" kindref="member">vector_c</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>__attribute__((nonnull));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Copy<sp/>the<sp/>object<sp/>at<sp/>@a<sp/>elmt<sp/>into<sp/>the<sp/>@a<sp/>vector<sp/>at<sp/>index<sp/>@a<sp/>i</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@note<sp/>Though<sp/>this<sp/>operation<sp/>doesn&apos;t<sp/>have<sp/>the<sp/>@c<sp/>_z<sp/>suffix,<sp/>it<sp/>@b<sp/>is<sp/>a<sp/>part<sp/>of</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>the<sp/>explicit<sp/>interface<sp/>and<sp/>takes<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>as<sp/>@a<sp/>z.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>redundant<sp/>if<sp/>the<sp/>element<sp/>type<sp/>of<sp/>the<sp/>@a<sp/>vector<sp/>is<sp/>known<sp/>at</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>compile<sp/>time<sp/>as<sp/>it&apos;s<sp/>identical<sp/>to<sp/>&lt;code&gt;vector[i]<sp/>=<sp/>*elmt&lt;/code&gt;.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>If<sp/>@a<sp/>i<sp/>isn&apos;t<sp/>an<sp/>index<sp/>in<sp/>the<sp/>@a<sp/>vector,<sp/>@a<sp/>elmt<sp/>is<sp/>@c<sp/>NULL,<sp/>or<sp/>the<sp/>type<sp/>of</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>the<sp/>object<sp/>at<sp/>@a<sp/>elmt<sp/>is<sp/>incompatible<sp/>with<sp/>the<sp/>element<sp/>type<sp/>of<sp/>the<sp/>vector,</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>then<sp/>the<sp/>behavior<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@param<sp/>vector<sp/>the<sp/>vector<sp/>to<sp/>operate<sp/>on</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@param<sp/>i<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element<sp/>in<sp/>the<sp/>@a<sp/>vector<sp/>to<sp/>copy<sp/>to</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param<sp/>elmt<sp/>the<sp/>location<sp/>to<sp/>copy<sp/>the<sp/>element<sp/>from</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@param<sp/>z<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>@a<sp/>vector</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@see<sp/>vector_get()<sp/>-<sp/>the<sp/>inverse<sp/>operation<sp/>to<sp/>copy<sp/>data<sp/>from<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="access_8h_1ad8e87d0c382b03ae3f8c5f9658a52ed0" kindref="member">vector_set</ref>(<ref refid="common_8h_1a5b7d6c2eb384dea49554e889ad2740ad" kindref="member">vector_t</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elmt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>__attribute__((nonnull));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_ACCESS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VECTOR_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="source_2vector_2access_8c" kindref="compound">access.c</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VECTOR_TEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="header/vector/access.h"/>
  </compounddef>
</doxygen>
